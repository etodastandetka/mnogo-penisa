import crypto from 'crypto';
import axios from 'axios';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è FreedomPay
const FREEDOMPAY_CONFIG = {
  projectId: '560745',
  secretKey: 'ICfWiGtk83PSJRyk',
  secretKeyPayout: '7YAYjCE7qwVDm7cY',
  apiUrl: 'https://api.freedompay.kz',
  initPaymentUrl: 'https://api.freedompay.kz/init_payment.php',
  healthcheckUrl: 'https://api.freedompay.kz/status/healthcheck'
};

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface PaymentInitRequest {
  pg_merchant_id: string;
  pg_amount: number;
  pg_order_id: string;
  pg_description: string;
  pg_salt: string;
  pg_sig: string;
  pg_currency: string;
  pg_lifetime: number;
  pg_success_url: string;
  pg_failure_url: string;
  pg_result_url: string;
  pg_check_url: string;
}

interface PaymentInitResponse {
  pg_status: string;
  pg_payment_id?: string;
  pg_redirect_url?: string;
  pg_error_code?: string;
  pg_error_description?: string;
}

interface PaymentResult {
  pg_order_id: string;
  pg_payment_id: string;
  pg_amount: number;
  pg_currency: string;
  pg_result: number;
  pg_salt: string;
  pg_sig: string;
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FreedomPay API
export class FreedomPayService {
  private config = FREEDOMPAY_CONFIG;

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Å–æ–ª—å –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
   */
  private generateSalt(): string {
    return crypto.randomBytes(16).toString('hex');
  }

  /**
   * –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FreedomPay
   */
  private generateSignature(params: Record<string, any>): string {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∫–ª—é—á–∞–º
    const sortedParams = Object.keys(params).sort().reduce((result: Record<string, any>, key) => {
      result[key] = params[key];
      return result;
    }, {});

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    const signatureString = Object.values(sortedParams).join(';') + ';' + this.config.secretKey;
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º MD5 —Ö–µ—à
    return crypto.createHash('md5').update(signatureString).digest('hex');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
   */
  private verifySignature(params: Record<string, any>, signature: string): boolean {
    const expectedSignature = this.generateSignature(params);
    return expectedSignature === signature;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–∞—Ç–µ–∂
   */
  async initPayment(orderData: {
    orderId: string;
    amount: number;
    description: string;
    successUrl: string;
    failureUrl: string;
    resultUrl: string;
    checkUrl: string;
  }): Promise<PaymentInitResponse> {
    try {
      const salt = this.generateSalt();
      
      const requestParams: PaymentInitRequest = {
        pg_merchant_id: this.config.projectId,
        pg_amount: orderData.amount,
        pg_order_id: orderData.orderId,
        pg_description: orderData.description,
        pg_salt: salt,
        pg_currency: 'KGS',
        pg_lifetime: 3600, // 1 —á–∞—Å
        pg_success_url: orderData.successUrl,
        pg_failure_url: orderData.failureUrl,
        pg_result_url: orderData.resultUrl,
        pg_check_url: orderData.checkUrl,
        pg_sig: '' // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏–∂–µ
      };

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
      requestParams.pg_sig = this.generateSignature(requestParams);

      console.log('üöÄ FreedomPay: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞', {
        orderId: orderData.orderId,
        amount: orderData.amount,
        description: orderData.description
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ FreedomPay
      const response = await axios.post(this.config.initPaymentUrl, requestParams, {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });

      console.log('‚úÖ FreedomPay: –û—Ç–≤–µ—Ç –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é', response.data);

      return response.data;
    } catch (error: any) {
      console.error('‚ùå FreedomPay: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞', error);
      throw new Error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: ${error.message}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ FreedomPay
   */
  async checkHealth(): Promise<boolean> {
    try {
      const response = await axios.get(this.config.healthcheckUrl, {
        timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });
      
      console.log('üè• FreedomPay: Healthcheck —É—Å–ø–µ—à–µ–Ω', response.status);
      return response.status === 200;
    } catch (error: any) {
      console.error('‚ùå FreedomPay: Healthcheck –Ω–µ –ø—Ä–æ—à–µ–ª', error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å –≤—Ö–æ–¥—è—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  verifyPaymentResult(params: Record<string, any>): boolean {
    try {
      const signature = params.pg_sig;
      if (!signature) {
        console.error('‚ùå FreedomPay: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏');
        return false;
      }

      // –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const paramsForVerification = { ...params };
      delete paramsForVerification.pg_sig;

      const isValid = this.verifySignature(paramsForVerification, signature);
      
      if (isValid) {
        console.log('‚úÖ FreedomPay: –ü–æ–¥–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      } else {
        console.error('‚ùå FreedomPay: –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      }

      return isValid;
    } catch (error: any) {
      console.error('‚ùå FreedomPay: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏', error);
      return false;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–ª–∞—Ç–µ–∂–∞
   */
  processPaymentResult(params: Record<string, any>): {
    isValid: boolean;
    orderId: string;
    paymentId: string;
    amount: number;
    currency: string;
    isSuccess: boolean;
    errorCode?: string;
    errorDescription?: string;
  } {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    if (!this.verifyPaymentResult(params)) {
      return {
        isValid: false,
        orderId: '',
        paymentId: '',
        amount: 0,
        currency: '',
        isSuccess: false,
        errorCode: 'INVALID_SIGNATURE',
        errorDescription: '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
      };
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const result = {
      isValid: true,
      orderId: params.pg_order_id || '',
      paymentId: params.pg_payment_id || '',
      amount: parseFloat(params.pg_amount) || 0,
      currency: params.pg_currency || 'KGS',
      isSuccess: params.pg_result === '1',
      errorCode: params.pg_error_code,
      errorDescription: params.pg_error_description
    };

    console.log('üí∞ FreedomPay: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞', result);

    return result;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–∞
   */
  async checkPaymentAvailability(orderId: string, amount: number): Promise<boolean> {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ CHECK URL
      // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      console.log('üîç FreedomPay: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–∞', { orderId, amount });
      return true;
    } catch (error: any) {
      console.error('‚ùå FreedomPay: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–∞', error);
      return false;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const freedomPayService = new FreedomPayService();
