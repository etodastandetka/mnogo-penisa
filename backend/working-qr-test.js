console.log('üîß –¢–µ—Å—Ç —Å —Ä–∞–±–æ—á–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º QR-–∫–æ–¥–∞');
console.log('=' .repeat(50));

const crypto = require('crypto');

// –¢–µ—Å—Ç–æ–≤—ã–π API
const config = {
  version: 1005,
  sid: '2310370542',
  password: '#S5@8E#G3B(1J4W',
  serverUrl: 'https://mw-api-test.dengi.kg/api/json/json.php',
  lang: 'ru'
};

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
function createHash(jsonString, password) {
  return crypto.createHmac('md5', password).update(jsonString).digest('hex');
}

// –°–æ–∑–¥–∞–Ω–∏–µ JSON –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
function createCompactJson(obj) {
  return JSON.stringify(obj, null, '').replace(/\s+/g, '');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
function createRequest(cmd, data) {
  const mktime = Date.now().toString();
  
  const requestData = {
    cmd,
    version: config.version,
    sid: config.sid,
    mktime,
    lang: config.lang,
    data
  };
  
  const jsonString = createCompactJson(requestData);
  const hash = createHash(jsonString, config.password);
  requestData.hash = hash;
  
  return requestData;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
async function sendRequest(requestData) {
  try {
    console.log('üì§ JSON –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:');
    console.log(createCompactJson(requestData));
    console.log('üîê Hash:', requestData.hash);
    console.log('');
    
    const response = await fetch(config.serverUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json; charset=utf-8'
      },
      body: JSON.stringify(requestData)
    });
    
    const responseData = await response.json();
    console.log('üì• –û—Ç–≤–µ—Ç API:');
    console.log(JSON.stringify(responseData, null, 2));
    
    return responseData;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
    throw error;
  }
}

// –¢–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ)
async function testMinimal() {
  console.log('üß™ –¢–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏');
  console.log('-'.repeat(40));
  
  try {
    const requestData = createRequest('createInvoice', {
      order_id: `test_${Date.now()}`,
      desc: 'Test order',
      amount: 100,
      currency: 'KGS',
      test: 1
    });
    
    const response = await sendRequest(requestData);
    
    if (response.data && response.data.invoice_id) {
      console.log('‚úÖ –£–°–ü–ï–•! QR-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!');
      console.log('Invoice ID:', response.data.invoice_id);
      console.log('QR URL:', response.data.qr_url);
      console.log('EMV QR:', response.data.emv_qr);
      console.log('Link App:', response.data.link_app);
      
      console.log('\nüéâ –í–û–¢ –í–ê–® QR-–ö–û–î!');
      console.log('=' .repeat(50));
      console.log('üîó –û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ:');
      console.log(response.data.qr_url);
      console.log('');
      console.log('üì± –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ EMV QR –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:');
      console.log(response.data.emv_qr);
      
      return response.data;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞:', response.data?.desc || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      return null;
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error.message);
    return null;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testMinimal();
