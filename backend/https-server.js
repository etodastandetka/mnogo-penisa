const https = require('https');
const http = require('http');
const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');

console.log('üöÄ –ó–∞–ø—É—Å–∫ HTTPS —Å–µ—Ä–≤–µ—Ä–∞...');

// –°–æ–∑–¥–∞–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
const createSelfSignedCert = () => {
  const certPath = path.join(__dirname, 'certs');
  const certFile = path.join(certPath, 'certificate.pem');
  const keyFile = path.join(certPath, 'private-key.pem');
  
  if (!fs.existsSync(certPath)) {
    fs.mkdirSync(certPath, { recursive: true });
  }
  
  if (!fs.existsSync(certFile) || !fs.existsSync(keyFile)) {
    console.log('üîê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º openssl –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    const openssl = spawn('openssl', [
      'req', '-x509', '-newkey', 'rsa:4096', '-keyout', keyFile, '-out', certFile,
      '-days', '365', '-nodes', '-subj', '/C=RU/ST=Moscow/L=Moscow/O=MnogoRolly/CN=localhost'
    ], {
      stdio: 'inherit'
    });
    
    openssl.on('close', (code) => {
      if (code === 0) {
        console.log('‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω');
        startHttpsServer();
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞, –∑–∞–ø—É—Å–∫–∞–µ–º HTTP');
        startHttpServer();
      }
    });
  } else {
    console.log('‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω');
    startHttpsServer();
  }
};

const startHttpsServer = () => {
  try {
    const certPath = path.join(__dirname, 'certs');
    const certFile = path.join(certPath, 'certificate.pem');
    const keyFile = path.join(certPath, 'private-key.pem');
    
    const options = {
      cert: fs.readFileSync(certFile),
      key: fs.readFileSync(keyFile)
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 3001
    const server = spawn('npx', ['ts-node', 'api/index.ts'], {
      stdio: 'inherit',
      env: {
        ...process.env,
        PORT: '3001'
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º HTTPS —Å–µ—Ä–≤–µ—Ä –Ω–∞–ø—Ä—è–º—É—é
    const httpsServer = https.createServer(options, (req, res) => {
      // –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
      res.setHeader('Access-Control-Allow-Origin', '*');
      res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
      res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º preflight –∑–∞–ø—Ä–æ—Å—ã
      if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
      }
      
      // –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ HTTP —Å–µ—Ä–≤–µ—Ä
      const proxyReq = http.request({
        hostname: '0.0.0.0',
        port: 3001,
        path: req.url,
        method: req.method,
        headers: req.headers
      }, (proxyRes) => {
        res.writeHead(proxyRes.statusCode, proxyRes.headers);
        proxyRes.pipe(res);
      });
      
      proxyReq.on('error', (err) => {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏:', err.message);
        res.writeHead(500);
        res.end('Internal Server Error');
      });
      
      req.pipe(proxyReq);
    });
    
         httpsServer.listen(3444, '0.0.0.0', () => {
       console.log('üîí HTTPS Server started on port: 3444');
       console.log('üåê URL: https://45.144.221.227:3444');
      console.log('‚ö†Ô∏è  –ë—Ä–∞—É–∑–µ—Ä –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ');
      console.log('üì± –ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –∏–ª–∏ "–î–æ–≤–µ—Ä—è—Ç—å"');
    });
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ HTTPS —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
    console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä');
    startHttpServer();
  }
};

const startHttpServer = () => {
  console.log('üåê –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä...');
  const server = spawn('npx', ['ts-node', 'api/index.ts'], {
    stdio: 'inherit',
    env: {
      ...process.env,
      PORT: '3001'
    }
  });
};

createSelfSignedCert();
