console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω API O!Dengi');
console.log('=' .repeat(70));

const crypto = require('crypto');

// –ü—Ä–æ–¥–∞–∫—à–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  version: 1005,
  sid: '5240752550',
  password: 'R^@OVPC|5@{64}G',
  serverUrl: 'https://api.dengi.o.kg/api/json/json.php',
  lang: 'ru'
};

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
function createHash(jsonString, password) {
  return crypto.createHmac('md5', password).update(jsonString).digest('hex');
}

// –°–æ–∑–¥–∞–Ω–∏–µ JSON –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
function createCompactJson(obj) {
  return JSON.stringify(obj, null, '').replace(/\s+/g, '');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
function createRequest(cmd, data) {
  const mktime = Date.now().toString();
  
  const requestData = {
    cmd,
    version: config.version,
    sid: config.sid,
    mktime,
    lang: config.lang,
    data
  };
  
  const jsonString = createCompactJson(requestData);
  const hash = createHash(jsonString, config.password);
  requestData.hash = hash;
  
  return requestData;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
async function sendRequest(requestData) {
  try {
    const response = await fetch(config.serverUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json; charset=utf-8'
      },
      body: JSON.stringify(requestData)
    });
    
    const responseData = await response.json();
    return responseData;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
    throw error;
  }
}

// –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
async function testVariations() {
  const variations = [
    {
      name: '1. –¢–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
      data: {
        order_id: `test_${Date.now()}`,
        desc: 'Test order',
        amount: 100,
        currency: 'KGS'
      }
    },
    {
      name: '2. –° test=1 (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)',
      data: {
        order_id: `test_${Date.now()}`,
        desc: 'Test order',
        amount: 100,
        currency: 'KGS',
        test: 1
      }
    },
    {
      name: '3. –° long_term=0',
      data: {
        order_id: `test_${Date.now()}`,
        desc: 'Test order',
        amount: 100,
        currency: 'KGS',
        test: 1,
        long_term: 0
      }
    },
    {
      name: '4. –° result_url',
      data: {
        order_id: `test_${Date.now()}`,
        desc: 'Test order',
        amount: 100,
        currency: 'KGS',
        test: 1,
        result_url: 'https://example.com/callback'
      }
    },
    {
      name: '5. –° user_to (—Ç–µ–ª–µ—Ñ–æ–Ω)',
      data: {
        order_id: `test_${Date.now()}`,
        desc: 'Test order',
        amount: 100,
        currency: 'KGS',
        test: 1,
        user_to: '996555123456'
      }
    },
    {
      name: '6. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ (1 —Å–æ–º)',
      data: {
        order_id: `test_${Date.now()}`,
        desc: 'Test order',
        amount: 100,
        currency: 'KGS',
        test: 1
      }
    }
  ];

  for (const variation of variations) {
    console.log(`\nüß™ ${variation.name}`);
    console.log('-'.repeat(50));
    
    try {
      const requestData = createRequest('createInvoice', variation.data);
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...');
      
      const response = await sendRequest(requestData);
      
      if (response.data && response.data.invoice_id) {
        console.log('‚úÖ –£–°–ü–ï–•! QR-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!');
        console.log('Invoice ID:', response.data.invoice_id);
        console.log('QR URL:', response.data.qr_url);
        console.log('EMV QR:', response.data.emv_qr);
        console.log('Link App:', response.data.link_app);
        return response.data;
      } else if (response.data && response.data.error) {
        console.log('‚ùå –û—à–∏–±–∫–∞:', response.data.desc);
        console.log('–ö–æ–¥ –æ—à–∏–±–∫–∏:', response.data.error);
      } else {
        console.log('‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:', response);
      }
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞:', error.message);
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  return null;
}

// –¢–µ—Å—Ç getOTP —Å–Ω–∞—á–∞–ª–∞
async function testGetOTP() {
  console.log('\nüß™ –¢–ï–°–¢: getOTP');
  console.log('-'.repeat(30));
  
  try {
    const requestData = createRequest('getOTP', { return_url: null });
    const response = await sendRequest(requestData);
    
    if (response.data && response.data.otp) {
      console.log('‚úÖ OTP –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log('OTP:', response.data.otp);
      return response.data.otp;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OTP');
      if (response.data && response.data.error) {
        console.log('–ö–æ–¥ –æ—à–∏–±–∫–∏:', response.data.error);
        console.log('–û–ø–∏—Å–∞–Ω–∏–µ:', response.data.desc);
      }
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ getOTP:', error.message);
  }
  
  return null;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runTests() {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º getOTP
    const otp = await testGetOTP();
    
    // –ó–∞—Ç–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã createInvoice
    const result = await testVariations();
    
    if (result) {
      console.log('\nüéâ QR-–ö–û–î –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù!');
      console.log('=' .repeat(50));
      console.log('üîó QR-—Å—Å—ã–ª–∫–∏:');
      console.log('QR URL:', result.qr_url);
      console.log('EMV QR:', result.emv_qr);
      console.log('Link App:', result.link_app);
    } else {
      console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º');
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests();
