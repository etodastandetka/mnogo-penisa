import React, { useState } from 'react';
import { Card, CardContent } from './ui/Card';
import { Button } from './ui/Button';
import { Badge } from './ui/Badge';
import { Plus, Minus, Image as ImageIcon } from 'lucide-react';
import { useCartStore } from '../store/cartStore';
import { formatPrice } from '../utils/format';
import { Product } from '../types';

interface ProductCardProps {
  product: Product;
}

export const ProductCard: React.FC<ProductCardProps> = ({ product }) => {
  // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined/null
  if (!product) {
    console.log('‚ùå ProductCard: product is undefined/null');
    return null;
  }
  const { addItem, removeItem, updateQuantity, getItemQuantity } = useCartStore();
  const quantity = getItemQuantity(product.id.toString());
  const [imageError, setImageError] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
  const getImageUrl = (): string | null => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–±–∏–ª—å–Ω—ã–º
    const isMobile = window.innerWidth <= 768;
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –º–æ–±–∏–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –æ—Å–Ω–æ–≤–Ω–æ–µ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
    let imageUrl = '';
    
    if (isMobile && product.mobile_image_url) {
      imageUrl = product.mobile_image_url;
      console.log('üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è', product.name, ':', imageUrl);
    } else if (product.image_url || product.image) {
      imageUrl = product.image_url || product.image || '';
      console.log('üíª –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è', product.name, ':', imageUrl);
    }
    
    console.log('üñºÔ∏è getImageUrl –¥–ª—è', product.name, ':', {
      isMobile,
      mobileImage: product.mobile_image_url,
      mainImage: product.image_url || product.image,
      selectedImage: imageUrl,
      trimmed: imageUrl?.trim(),
      notNull: imageUrl !== 'null',
      hasValue: !!imageUrl
    });
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (imageUrl && imageUrl.trim() && imageUrl !== 'null') {
      console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è', product.name, ':', imageUrl);
      
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ URL –≤—ã–≥–ª—è–¥–∏—Ç –≤–∞–ª–∏–¥–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ª–æ–º–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
      if (imageUrl.startsWith('http') || imageUrl.startsWith('/')) {
        return imageUrl;
      }
    }
    
    console.log('‚ùå –ù–ï–¢ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', product.name, 'input:', imageUrl);
    return null; // –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –ø–æ–∫–∞–∂–µ–º —ç–º–æ–¥–∑–∏
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å)
  const getFallbackImageUrl = (): string | null => {
    // –ï—Å–ª–∏ –º—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º –∏ –º–æ–±–∏–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ
    const isMobile = window.innerWidth <= 768;
    
    if (isMobile && product.mobile_image_url && (product.image_url || product.image)) {
      console.log('üîÑ –ú–æ–±–∏–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –¥–ª—è', product.name);
      return product.image_url || product.image || null;
    }
    
    return null;
  };

  const handleImageLoad = () => {
    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', product.name);
    setImageError(false);
  };

  const handleImageError = (e: React.SyntheticEvent<HTMLImageElement, Event>) => {
    const originalUrl = e.currentTarget.src;
    
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', product.name);
    console.error('‚ùå URL:', originalUrl);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const fallbackUrl = getFallbackImageUrl();
    
    if (fallbackUrl && fallbackUrl !== originalUrl) {
      console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è', product.name, ':', fallbackUrl);
      // –û–±–Ω–æ–≤–ª—è–µ–º src –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      e.currentTarget.src = fallbackUrl;
      setImageError(false);
      return;
    }
    
    console.log('‚ùå Fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è', product.name);
    setImageError(true);
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏ fallback
  };

  const handleAddToCart = () => {
    addItem(product);
  };

  const handleRemoveFromCart = () => {
    removeItem(product.id.toString());
  };

  const handleUpdateQuantity = (newQuantity: number) => {
    if (newQuantity <= 0) {
      removeItem(product.id.toString());
    } else {
      updateQuantity(product.id.toString(), newQuantity);
    }
  };

  const imageUrl = getImageUrl();
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const getCategoryEmoji = (category: string) => {
    const emojiMap: { [key: string]: string } = {
      'rolls': 'üç£',
      'pizza': 'üçï', 
      'wings': 'üçó',
      'snacks': 'üçü',
      'drinks': 'ü•§',
      'sauces': 'ü•´',
      'sets': 'üç±'
    };
    return emojiMap[category] || 'üçΩÔ∏è';
  };
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  React.useEffect(() => {
    console.log(`üì¶ –¢–û–í–ê–†: ${product.name}`, {
      image_url: product.image_url,
      image: product.image,
      mobile_image_url: product.mobile_image_url,
      original_image_url: product.original_image_url,
      processedImageUrl: imageUrl,
      category: product.category
    });
  }, [product, imageUrl]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  React.useEffect(() => {
    const handleResize = () => {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
      console.log('üîÑ –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è', product.name);
      setImageError(false);
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  React.useEffect(() => {
    const isMobile = window.innerWidth <= 768;
    console.log(`üì±/üíª –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${isMobile ? '–ú–æ–±–∏–ª—å–Ω–æ–µ' : '–î–µ—Å–∫—Ç–æ–ø'} –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.name}`, {
      mobileImage: product.mobile_image_url,
      mainImage: product.image_url || product.image,
      selectedImage: imageUrl
    });
  }, [product, imageUrl]);

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  React.useEffect(() => {
    setImageError(false);
  }, [imageUrl]);

  return (
    <Card className="group hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 sm:hover:-translate-y-2 h-full flex flex-col border border-gray-200 bg-white touch-manipulation">
      <div className="relative overflow-hidden rounded-t-xl bg-gray-100 touch-manipulation">
        {imageUrl && !imageError ? (
          <>
            {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
            <img
              src={imageUrl}
              alt={product.name}
              className="w-full h-24 sm:h-32 md:h-40 object-cover group-hover:scale-110 transition-all duration-300"
              onLoad={handleImageLoad}
              onError={handleImageError}
              loading="lazy"
              crossOrigin="anonymous"
              referrerPolicy="no-referrer"
              decoding="async"
              style={{ 
                objectFit: 'cover'
              }}
            />
            
            {/* Fallback –¥–ª—è –æ—à–∏–±–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
            {imageError && (
              <div className="absolute inset-0 flex items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100">
                <div className="text-center">
                  <div className="text-4xl sm:text-5xl md:text-6xl mb-2 emoji-font">
                    {getCategoryEmoji(product.category)}
                  </div>
                  <p className="text-xs text-gray-500 px-2 hidden sm:block">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</p>
                </div>
              </div>
            )}
          </>
        ) : (
          /* –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏ */
          <div className="w-full h-24 sm:h-32 md:h-40 flex items-center justify-center bg-gradient-to-br from-gray-100 to-gray-200">
            <div className="text-center">
              <div className="text-4xl sm:text-5xl md:text-6xl mb-2 emoji-font">
                {getCategoryEmoji(product.category)}
              </div>
              <p className="text-xs text-gray-500 px-2 hidden sm:block">–ù–µ—Ç —Ñ–æ—Ç–æ</p>
            </div>
          </div>
        )}
        
        {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –≤ development) */}
        {process.env.NODE_ENV === 'development' && (
          <div className="absolute top-0 right-0 bg-black/50 text-white text-xs p-1 rounded-bl">
            {product.image_url ? 'Has img' : 'No img'}
          </div>
        )}

        {/* –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
        {window.innerWidth <= 768 && (
          <div className="absolute top-0 left-0 bg-blue-500 text-white text-xs p-1 rounded-br max-w-[120px]">
            <div>üì± Mobile</div>
            <div className="text-[10px]">
              {product.mobile_image_url ? 'Has mobile' : 'No mobile'}
            </div>
            <div className="text-[10px]">
              {imageUrl ? 'Has img' : 'No img'}
            </div>
          </div>
        )}
        
        {product.isPopular && (
          <div className="absolute top-1 left-1 sm:top-2 sm:left-2 md:top-3 md:left-3">
            <Badge variant="primary" className="bg-red-500 text-white text-xs px-1 sm:px-2 py-0.5 sm:py-1">
              –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ
            </Badge>
          </div>
        )}
        {product.is_available === false && (
          <div className="absolute inset-0 bg-black/50 flex items-center justify-center">
            <Badge variant="secondary" className="bg-gray-600 text-white text-xs sm:text-sm">
              –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ
            </Badge>
          </div>
        )}
      </div>
      
      <CardContent className="p-2 sm:p-3 md:p-4 flex-1 flex flex-col">
        <h3 className="font-semibold text-gray-900 mb-1 sm:mb-2 group-hover:text-red-600 transition-colors text-xs sm:text-sm md:text-base line-clamp-2 min-h-[1.5rem] sm:min-h-[2rem] leading-tight">
          {product.name}
        </h3>
        <p className="text-gray-600 text-xs mb-1 sm:mb-2 line-clamp-1 sm:line-clamp-2 flex-1 min-h-[1rem] sm:min-h-[2rem] leading-tight">
          {product.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
        </p>
        
        <div className="flex items-center justify-between mt-auto pt-1 sm:pt-2">
          <span className="text-sm sm:text-base md:text-lg font-bold text-red-600">
            {formatPrice(product.price)}
          </span>
          
          {quantity > 0 ? (
            <div className="flex items-center gap-1 sm:gap-2">
              <Button
                size="sm"
                variant="outline"
                onClick={() => handleUpdateQuantity(quantity - 1)}
                className="w-7 h-7 sm:w-8 sm:h-8 p-0 border border-gray-300 flex items-center justify-center touch-manipulation active:scale-95 transition-transform"
              >
                <Minus className="w-3 h-3 sm:w-4 sm:h-4" />
              </Button>
              <span className="font-semibold min-w-[1.2rem] sm:min-w-[1.5rem] text-center text-sm sm:text-base">{quantity}</span>
              <Button
                size="sm"
                variant="outline"
                onClick={() => handleUpdateQuantity(quantity + 1)}
                className="w-7 h-7 sm:w-8 sm:h-8 p-0 border border-gray-300 flex items-center justify-center touch-manipulation active:scale-95 transition-transform"
              >
                <Plus className="w-3 h-3 sm:w-4 sm:h-4" />
              </Button>
            </div>
          ) : (
            <Button 
              size="sm"
              onClick={handleAddToCart}
              className="bg-red-600 hover:bg-red-700 active:bg-red-800 text-white w-7 h-7 sm:w-8 sm:h-8 p-0 border border-red-600 flex items-center justify-center touch-manipulation active:scale-95 transition-all"
              disabled={product.is_available === false}
            >
              <Plus className="w-3 h-3 sm:w-4 sm:h-4" />
            </Button>
          )}
        </div>
      </CardContent>
    </Card>
  );
};
