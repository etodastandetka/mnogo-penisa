console.log('üîç –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ O!Dengi');
console.log('=' .repeat(50));

const crypto = require('crypto');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  version: 1005,
  sid: '2310370542',
  password: '#S5@8E#G3B(1J4W',
  serverUrl: 'https://mw-api-test.dengi.kg/api/json/json.php',
  lang: 'ru'
};

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
function createHash(jsonString, password) {
  return crypto.createHmac('md5', password).update(jsonString).digest('hex');
}

// –°–æ–∑–¥–∞–Ω–∏–µ JSON –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
function createCompactJson(obj) {
  return JSON.stringify(obj, null, '').replace(/\s+/g, '');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
function createRequest(cmd, data) {
  const mktime = Date.now().toString();
  
  const requestData = {
    cmd,
    version: config.version,
    sid: config.sid,
    mktime,
    lang: config.lang,
    data
  };
  
  const jsonString = createCompactJson(requestData);
  const hash = createHash(jsonString, config.password);
  requestData.hash = hash;
  
  return requestData;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
async function sendRequest(requestData) {
  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...');
    console.log('–ö–æ–º–∞–Ω–¥–∞:', requestData.cmd);
    
    const response = await fetch(config.serverUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json; charset=utf-8'
      },
      body: JSON.stringify(requestData)
    });
    
    const responseData = await response.json();
    console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:');
    console.log(JSON.stringify(responseData, null, 2));
    
    return responseData;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
    throw error;
  }
}

// –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
async function testStatusPayment() {
  console.log('\nüß™ –¢–ï–°–¢: statusPayment');
  console.log('-' .repeat(30));
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º invoice_id –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
    const invoiceId = '649313216038';
    const orderId = 'test_175808557425879';
    
    const requestData = createRequest('statusPayment', {
      invoice_id: invoiceId,
      order_id: orderId,
      mark: 0
    });
    
    const response = await sendRequest(requestData);
    
    if (response.data && response.data.error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ API:', response.data.desc);
      console.log('–ö–æ–¥ –æ—à–∏–±–∫–∏:', response.data.error);
    } else if (response.data) {
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('Status Pay:', response.data.status_pay);
      console.log('Amount:', response.data.amount);
      console.log('Currency:', response.data.currency);
      console.log('Order ID:', response.data.order_id);
      
      // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
      const statusMap = {
        1: '–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã',
        2: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', 
        3: '–ü–ª–∞—Ç–µ–∂ –æ–ø–ª–∞—á–µ–Ω'
      };
      
      const statusText = statusMap[response.data.status_pay] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
      console.log('–°—Ç–∞—Ç—É—Å:', statusText);
    } else {
      console.log('‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:', response);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
}

// –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –∏–Ω–≤–æ–π—Å–∞
async function testCancelInvoice() {
  console.log('\nüß™ –¢–ï–°–¢: invoiceCancel');
  console.log('-' .repeat(30));
  
  try {
    const invoiceId = '649313216038';
    
    const requestData = createRequest('invoiceCancel', {
      invoice_id: invoiceId
    });
    
    const response = await sendRequest(requestData);
    
    if (response.data && response.data.error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ API:', response.data.desc);
      console.log('–ö–æ–¥ –æ—à–∏–±–∫–∏:', response.data.error);
    } else if (response.data) {
      console.log('‚úÖ –ò–Ω–≤–æ–π—Å –æ—Ç–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('–û—Ç–≤–µ—Ç:', response.data);
    } else {
      console.log('‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:', response);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runTests() {
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    await testStatusPayment();
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
    console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –¢–µ—Å—Ç 2: –û—Ç–º–µ–Ω–∞ –∏–Ω–≤–æ–π—Å–∞
    await testCancelInvoice();
    
    console.log('\nüéâ –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!');
    console.log('=' .repeat(50));
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests();
