import React, { useState } from 'react';
import { Card, CardContent } from './ui/Card';
import { Button } from './ui/Button';
import { Badge } from './ui/Badge';
import { Plus, Minus, Image as ImageIcon, Eye } from 'lucide-react';
import { useCartStore } from '../store/cartStore';
import { formatPrice } from '../utils/format';
import { Product } from '../types';
import { ProductDetailModal } from './ProductDetailModal';

interface ProductCardProps {
  product: Product;
}

export const ProductCard: React.FC<ProductCardProps> = ({ product }) => {
  // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined/null
  if (!product) {
    console.log('‚ùå ProductCard: product is undefined/null');
    return (
      <div className="bg-white rounded-lg shadow-md p-4 border border-gray-200">
        <div className="text-center text-gray-500">
          <div className="w-32 h-32 bg-gray-200 rounded-lg mx-auto mb-3"></div>
          <p>–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
        </div>
      </div>
    );
  }

  const { addItem, removeItem, updateQuantity, getItemQuantity } = useCartStore();
  const quantity = getItemQuantity(product.id.toString());
  const [imageError, setImageError] = useState(false);
  const [showDetailModal, setShowDetailModal] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –º–æ–±–∏–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤–µ–∑–¥–µ
  const getImageUrl = (): string | null => {
    try {
      let imageUrl = '';
      
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –º–æ–±–∏–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –≤–µ–∑–¥–µ, –∑–∞—Ç–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∫–∞–∫ fallback
      if (product.mobile_image_url && product.mobile_image_url !== 'null' && product.mobile_image_url !== '') {
        imageUrl = product.mobile_image_url;
      } else if (product.image_url && product.image_url !== 'null' && product.image_url !== '') {
        imageUrl = product.image_url;
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (imageUrl && imageUrl.trim() && imageUrl !== 'null') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∏–ø—ã URL
        if (imageUrl.startsWith('http') || imageUrl.startsWith('/') || imageUrl.startsWith('data:image/')) {
          return imageUrl;
        }
      }
      
      return null; // –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –ø–æ–∫–∞–∂–µ–º —ç–º–æ–¥–∑–∏
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      return null;
    }
  };

  const handleImageLoad = () => {
    try {
      console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', product.name);
      setImageError(false);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    }
  };

  const handleImageError = (e: React.SyntheticEvent<HTMLImageElement, Event>) => {
    setImageError(true);
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', product.name);
  };

  const handleAddToCart = () => {
    addItem(product);
  };

  const handleRemoveFromCart = () => {
    removeItem(product.id.toString());
  };

  const handleUpdateQuantity = (newQuantity: number) => {
    if (newQuantity <= 0) {
      removeItem(product.id.toString());
    } else {
      updateQuantity(product.id.toString(), newQuantity);
    }
  };

  const imageUrl = getImageUrl();
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const getCategoryEmoji = (category: string) => {
    const emojiMap: { [key: string]: string } = {
      'rolls': 'üç£',
      'pizza': 'üçï', 
      'wings': 'üçó',
      'snacks': 'üçü',
      'drinks': 'ü•§',
      'sauces': 'ü•´',
      'sets': 'üç±'
    };
    return emojiMap[category] || 'üçΩÔ∏è';
  };
  


  // –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏–∫—É —Å resize - —Ç–µ–ø–µ—Ä—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  React.useEffect(() => {
    setImageError(false);
  }, [imageUrl]);

  return (
    <>
    <Card className="group hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 sm:hover:-translate-y-2 h-full flex flex-col border border-gray-200 bg-white touch-manipulation">
      <div className="relative overflow-hidden rounded-t-xl bg-gray-100 touch-manipulation h-40 sm:h-48 md:h-56">
        {imageUrl && !imageError ? (
          <>
            {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
            <img
              src={imageUrl}
              alt={product.name}
              className="w-full h-40 sm:h-48 md:h-56 object-contain group-hover:scale-110 transition-all duration-300"
              onLoad={handleImageLoad}
              onError={handleImageError}
              loading="lazy"
              crossOrigin="anonymous"
              referrerPolicy="no-referrer"
              decoding="async"
              style={{ 
                objectFit: 'cover'
              }}
            />
            
            {/* Fallback –¥–ª—è –æ—à–∏–±–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
            {imageError && (
              <div className="absolute inset-0 flex items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100">
                <div className="text-center">
                  <div className="text-4xl sm:text-5xl md:text-6xl mb-2 emoji-font">
                    {getCategoryEmoji(product.category)}
                  </div>
                  <p className="text-xs text-gray-500 px-2 hidden sm:block">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</p>
                </div>
              </div>
            )}
          </>
        ) : (
          /* –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏ */
          <div className="w-full h-40 sm:h-48 md:h-56 flex items-center justify-center bg-gradient-to-br from-gray-100 to-gray-200">
            <div className="text-center">
              <div className="text-4xl sm:text-5xl md:text-6xl mb-2 emoji-font">
                {getCategoryEmoji(product.category)}
              </div>
              <p className="text-xs text-gray-500 px-2 hidden sm:block">–ù–µ—Ç —Ñ–æ—Ç–æ</p>
            </div>
          </div>
        )}
        

        
        {product.isPopular && (
          <div className="absolute top-1 left-1 sm:top-2 sm:left-2 md:top-3 md:left-3">
            <Badge variant="primary" className="bg-orange-500 text-white text-xs px-1 sm:px-2 py-0.5 sm:py-1">
              –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ
            </Badge>
          </div>
        )}
        {product.is_available === false && (
          <div className="absolute inset-0 bg-black/50 flex items-center justify-center">
            <Badge variant="secondary" className="bg-gray-600 text-white text-xs sm:text-sm">
              –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ
            </Badge>
          </div>
        )}
      </div>
      
      <CardContent className="p-2 sm:p-3 md:p-4 flex-1 flex flex-col">
        <h3 className="font-semibold text-gray-900 mb-1 sm:mb-2 group-hover:text-red-600 transition-colors text-xs sm:text-sm md:text-base line-clamp-2 min-h-[1.5rem] sm:min-h-[2rem] leading-tight">
          {product.name}
        </h3>
        <p className="text-gray-600 text-xs mb-1 sm:mb-2 line-clamp-1 sm:line-clamp-2 flex-1 min-h-[1rem] sm:min-h-[2rem] leading-tight">
          {product.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
        </p>
        
        <div className="mt-auto pt-1 sm:pt-2 space-y-2">
          <div className="flex items-center justify-between">
            <span className="text-sm sm:text-base md:text-lg font-bold text-orange-600">
              {formatPrice(product.price)}
            </span>
            
            {quantity > 0 ? (
              <div className="flex items-center gap-2 sm:gap-3">
                <Button
                  size="sm"
                  variant="outline"
                  onClick={() => handleUpdateQuantity(quantity - 1)}
                  className="w-8 h-8 sm:w-9 sm:h-9 p-0 border-2 border-gray-300 hover:border-orange-400 hover:bg-orange-50 flex items-center justify-center touch-manipulation active:scale-95 transition-all duration-200 rounded-full"
                >
                  <Minus className="w-4 h-4 sm:w-5 sm:h-5" />
                </Button>
                <span className="font-bold min-w-[2rem] sm:min-w-[2.5rem] text-center text-sm sm:text-base text-gray-900 bg-gray-50 px-2 py-1 rounded-lg">{quantity}</span>
                <Button
                  size="sm"
                  variant="outline"
                  onClick={() => handleUpdateQuantity(quantity + 1)}
                  className="w-8 h-8 sm:w-9 sm:h-9 p-0 border-2 border-gray-300 hover:border-orange-400 hover:bg-orange-50 flex items-center justify-center touch-manipulation active:scale-95 transition-all duration-200 rounded-full"
                >
                  <Plus className="w-4 h-4 sm:w-5 sm:h-5" />
                </Button>
              </div>
            ) : (
              <Button 
                size="sm"
                onClick={handleAddToCart}
                className="bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 active:from-orange-700 active:to-orange-800 text-white w-8 h-8 sm:w-9 sm:h-9 p-0 border-0 shadow-lg hover:shadow-xl flex items-center justify-center touch-manipulation active:scale-95 transition-all duration-200 rounded-full"
                disabled={product.is_available === false}
              >
                <Plus className="w-4 h-4 sm:w-5 sm:h-5" />
              </Button>
            )}
          </div>
          
          {/* –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" */}
          <Button
            size="sm"
            variant="outline"
            onClick={() => setShowDetailModal(true)}
            className="w-full text-xs sm:text-sm py-1 sm:py-2 border border-gray-300 hover:border-orange-400 hover:bg-orange-50 hover:text-orange-600 transition-all duration-200"
          >
            <Eye className="w-3 h-3 sm:w-4 sm:h-4 mr-1" />
            –ü–æ–¥—Ä–æ–±–Ω–µ–µ
          </Button>
        </div>
      </CardContent>
    </Card>
    
    {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
    {showDetailModal && (
      <ProductDetailModal
        product={product}
        onClose={() => setShowDetailModal(false)}
      />
    )}
    </>
  );
};
