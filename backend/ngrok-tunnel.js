const { spawn } = require('child_process');

console.log('๐ ะะฐัััะพะนะบะฐ ngrok ััะฝะฝะตะปั ะดะปั HTTPS...');

// ะัะพะฒะตััะตะผ, ัััะฐะฝะพะฒะปะตะฝ ะปะธ ngrok
const checkNgrok = () => {
  return new Promise((resolve) => {
    const check = spawn('ngrok', ['version'], { stdio: 'pipe' });
    check.on('close', (code) => {
      resolve(code === 0);
    });
  });
};

// ะะฐะฟััะบะฐะตะผ ััะฝะฝะตะปั
const startTunnel = async () => {
  const isInstalled = await checkNgrok();
  
  if (!isInstalled) {
    console.log('โ ngrok ะฝะต ัััะฐะฝะพะฒะปะตะฝ');
    console.log('๐ฅ ะกะบะฐัะฐะนัะต ั: https://ngrok.com/download');
    console.log('๐ ะะพะปััะธัะต ะฑะตัะฟะปะฐัะฝัะน ัะพะบะตะฝ ะฝะฐ: https://dashboard.ngrok.com/get-started/your-authtoken');
    return;
  }
  
  console.log('โ ngrok ะฝะฐะนะดะตะฝ, ะทะฐะฟััะบะฐะตะผ ััะฝะฝะตะปั...');
  
  const tunnel = spawn('ngrok', [
    'http',
    '3001',
    '--log=stdout'
  ], {
    stdio: 'inherit'
  });
  
  tunnel.on('error', (error) => {
    console.error('โ ะัะธะฑะบะฐ ััะฝะฝะตะปั:', error);
  });
  
  tunnel.on('close', (code) => {
    console.log(`๐ด ะขัะฝะฝะตะปั ะพััะฐะฝะพะฒะปะตะฝ ั ะบะพะดะพะผ: ${code}`);
  });
  
  console.log('๐ HTTPS ััะฝะฝะตะปั ะทะฐะฟััะตะฝ!');
  console.log('๐ ะัะพะฒะตัััะต URL ะฒ ะบะพะฝัะพะปะธ ngrok');
};

startTunnel();




