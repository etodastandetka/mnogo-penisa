import { apiClient } from './client';

export interface LoginRequest {
  email: string;
  password: string;
}

export interface RegisterRequest {
  email: string;
  password: string;
  name: string;
  phone?: string;
  address?: string;
}

export interface NormalizedAuthResponse {
  access_token: string;
  user: {
    id: number;
    email: string;
    name: string;
    phone?: string;
    address?: string;
    isAdmin?: boolean;
  };
}

export const login = async (credentials: LoginRequest): Promise<NormalizedAuthResponse> => {
  try {
    const response = await apiClient.post('/auth/login', credentials);
    console.log('üîß Raw API response:', response);
    console.log('üîß Response data:', response.data);
    console.log('üîß Response data type:', typeof response.data);
    console.log('üîß Response data keys:', Object.keys(response.data || {}));
    return response.data;
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    
    if (error.response?.status === 401) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
    } else if (error.response?.status >= 500) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
    } else if (error.code === 'ERR_NETWORK') {
      throw new Error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç');
    } else {
      throw new Error(error.response?.data?.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
    }
  }
};

export const register = async (userData: RegisterRequest): Promise<NormalizedAuthResponse> => {
  try {
    const response = await apiClient.post('/auth/register', userData);
    console.log('üîß Raw API response:', response);
    console.log('üîß Response data:', response.data);
    console.log('üîß Response data type:', typeof response.data);
    console.log('üîß Response data keys:', Object.keys(response.data || {}));
    return response.data;
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    
    if (error.response?.status === 409) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    } else if (error.response?.status >= 500) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
    } else if (error.code === 'ERR_NETWORK') {
      throw new Error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç');
    } else {
      throw new Error(error.response?.data?.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }
  }
};

export const logout = async (): Promise<void> => {
  try {
    await apiClient.post('/auth/logout');
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
  }
};
