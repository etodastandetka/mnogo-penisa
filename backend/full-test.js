console.log('üöÄ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç O!Dengi API');
console.log('=' .repeat(50));

const crypto = require('crypto');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  version: 1005,
  sid: '2310370542',
  password: '#S5@8E#G3B(1J4W',
  serverUrl: 'https://mw-api-test.dengi.kg/api/json/json.php',
  lang: 'ru'
};

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
function createHash(jsonString, password) {
  return crypto.createHmac('md5', password).update(jsonString).digest('hex');
}

// –°–æ–∑–¥–∞–Ω–∏–µ JSON –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
function createCompactJson(obj) {
  return JSON.stringify(obj, null, '').replace(/\s+/g, '');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
function createRequest(cmd, data) {
  const mktime = Date.now().toString();
  
  const requestData = {
    cmd,
    version: config.version,
    sid: config.sid,
    mktime,
    lang: config.lang,
    data
  };
  
  const jsonString = createCompactJson(requestData);
  const hash = createHash(jsonString, config.password);
  requestData.hash = hash;
  
  return requestData;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
async function sendRequest(requestData) {
  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:', JSON.stringify(requestData, null, 2));
    
    const response = await fetch(config.serverUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json; charset=utf-8'
      },
      body: JSON.stringify(requestData)
    });
    
    const responseData = await response.json();
    console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', JSON.stringify(responseData, null, 2));
    
    return responseData;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
    throw error;
  }
}

// –¢–µ—Å—Ç 1: getOTP
async function testGetOTP() {
  console.log('\nüß™ –¢–ï–°–¢ 1: getOTP');
  console.log('-' .repeat(30));
  
  try {
    const requestData = createRequest('getOTP', { return_url: null });
    const response = await sendRequest(requestData);
    
    if (response.status === 'ok') {
      console.log('‚úÖ OTP –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      return response.otp;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞:', response.message);
      return null;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ getOTP:', error);
    return null;
  }
}

// –¢–µ—Å—Ç 2: createInvoice
async function testCreateInvoice() {
  console.log('\nüß™ –¢–ï–°–¢ 2: createInvoice');
  console.log('-' .repeat(30));
  
  try {
    const orderId = `test_${Date.now()}`;
    const amount = 1000; // 10 —Å–æ–º –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    
    const requestData = createRequest('createInvoice', {
      order_id: orderId,
      desc: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ O!Dengi',
      amount: amount,
      currency: 'KGS',
      test: 1,
      long_term: 0
    });
    
    const response = await sendRequest(requestData);
    
    if (response.status === 'ok') {
      console.log('‚úÖ –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log('Invoice ID:', response.invoice_id);
      console.log('QR URL:', response.qr_url);
      return {
        invoiceId: response.invoice_id,
        qrUrl: response.qr_url,
        orderId: response.order_id
      };
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞:', response.message);
      return null;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ createInvoice:', error);
    return null;
  }
}

// –¢–µ—Å—Ç 3: statusPayment
async function testStatusPayment(invoiceId, orderId) {
  console.log('\nüß™ –¢–ï–°–¢ 3: statusPayment');
  console.log('-' .repeat(30));
  
  try {
    const requestData = createRequest('statusPayment', {
      invoice_id: invoiceId,
      order_id: orderId,
      mark: 0
    });
    
    const response = await sendRequest(requestData);
    
    if (response.status === 'ok') {
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log('Status:', response.status_pay);
      console.log('Amount:', response.amount);
      return response;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞:', response.message);
      return null;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ statusPayment:', error);
    return null;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runTests() {
  try {
    // –¢–µ—Å—Ç 1: getOTP
    const otp = await testGetOTP();
    
    // –¢–µ—Å—Ç 2: createInvoice
    const invoice = await testCreateInvoice();
    
    if (invoice) {
      // –¢–µ—Å—Ç 3: statusPayment
      await testStatusPayment(invoice.invoiceId, invoice.orderId);
    }
    
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!');
    console.log('=' .repeat(50));
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests();
