const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');

console.log('üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

// –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, 'data', 'mnogo_rolly.db');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
if (!fs.existsSync(dbPath)) {
  console.log('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', dbPath);
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database(dbPath);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤
const runQuery = (query) => {
  return new Promise((resolve, reject) => {
    db.run(query, function(err) {
      if (err) {
        reject(err);
      } else {
        resolve(this);
      }
    });
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const getQuery = (query) => {
  return new Promise((resolve, reject) => {
    db.all(query, (err, rows) => {
      if (err) {
        reject(err);
      } else {
        resolve(rows);
      }
    });
  });
};

async function clearDatabase() {
  try {
    console.log('üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
    const tables = ['products', 'orders', 'order_items', 'users', 'bank_settings'];
    
    for (const table of tables) {
      try {
        const count = await getQuery(`SELECT COUNT(*) as count FROM ${table}`);
        console.log(`üìã ${table}: ${count[0]?.count || 0} –∑–∞–ø–∏—Å–µ–π`);
      } catch (error) {
        console.log(`üìã ${table}: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–∞`);
      }
    }
    
    console.log('\nüßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É...');
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π)
    const clearQueries = [
      'DELETE FROM order_items',
      'DELETE FROM orders', 
      'DELETE FROM products',
      'DELETE FROM users WHERE role != "admin"', // –û—Å—Ç–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
      'DELETE FROM bank_settings'
    ];
    
    for (const query of clearQueries) {
      try {
        await runQuery(query);
        console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${query}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ "${query}":`, error.message);
      }
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
    const resetQueries = [
      'DELETE FROM sqlite_sequence WHERE name="products"',
      'DELETE FROM sqlite_sequence WHERE name="orders"',
      'DELETE FROM sqlite_sequence WHERE name="order_items"',
      'DELETE FROM sqlite_sequence WHERE name="users"',
      'DELETE FROM sqlite_sequence WHERE name="bank_settings"'
    ];
    
    for (const query of resetQueries) {
      try {
        await runQuery(query);
        console.log(`‚úÖ –°–±—Ä–æ—à–µ–Ω –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç: ${query}`);
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      }
    }
    
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏...');
    
    for (const table of tables) {
      try {
        const count = await getQuery(`SELECT COUNT(*) as count FROM ${table}`);
        console.log(`üìã ${table}: ${count[0]?.count || 0} –∑–∞–ø–∏—Å–µ–π`);
      } catch (error) {
        console.log(`üìã ${table}: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–∞`);
      }
    }
    
    console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!');
    console.log('üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    db.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
clearDatabase();
