const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, 'data/mnogo_rolly.db');

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database(dbPath);

console.log('üí∞ –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –∑–∞–ø—É—â–µ–Ω');
console.log('üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', dbPath);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
function updatePrice(name, newPrice, newDescription = null) {
  return new Promise((resolve, reject) => {
    let sql, params;
    
    if (newDescription) {
      sql = `UPDATE products SET price = ?, description = ? WHERE name = ?`;
      params = [newPrice, newDescription, name];
    } else {
      sql = `UPDATE products SET price = ? WHERE name = ?`;
      params = [newPrice, name];
    }
    
    db.run(sql, params, function(err) {
      if (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ "${name}":`, err.message);
        reject(err);
      } else {
        if (this.changes > 0) {
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: ${name} ‚Üí ${newPrice} —Å–æ–º${newDescription ? ' (+ –æ–ø–∏—Å–∞–Ω–∏–µ)' : ''}`);
        } else {
          console.log(`‚ö†Ô∏è –¢–æ–≤–∞—Ä "${name}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
        resolve(this.changes);
      }
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
function addProduct(name, description, price, imageUrl, category, isPopular = 0, isAvailable = 1) {
  return new Promise((resolve, reject) => {
    const sql = `
      INSERT OR IGNORE INTO products (name, description, price, image_url, category, is_popular, is_available, created_at)
      VALUES (?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
    `;
    
    db.run(sql, [name, description, price, imageUrl, category, isPopular, isAvailable], function(err) {
      if (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ "${name}":`, err.message);
        reject(err);
      } else {
        if (this.changes > 0) {
          console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: ${name} (ID: ${this.lastID})`);
        } else {
          console.log(`‚ö†Ô∏è –¢–æ–≤–∞—Ä "${name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }
        resolve(this.lastID);
      }
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ category-specific placeholders)
function removeProductImages() {
  return new Promise((resolve, reject) => {
    const sql = `UPDATE products SET image_url = NULL`;
    
    db.run(sql, [], function(err) {
      if (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:`, err.message);
        reject(err);
      } else {
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É ${this.changes} —Ç–æ–≤–∞—Ä–æ–≤`);
        resolve(this.changes);
      }
    });
  });
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async function updatePrices() {
  console.log('\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω...');
  
  try {
    console.log('\nüñºÔ∏è –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤...');
    await removeProductImages();
    
    console.log('\nüç£ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã —Ä–æ–ª–ª–æ–≤...');
    
    // –†–æ–ª–ª—ã - –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—É
    await updatePrice('–ö–∏–æ—Ç–æ', 490);
    await updatePrice('–ó–∞–ø–µ—á–µ–Ω–Ω—ã–π –∫–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è', 410, '–ó–∞–ø–µ—á–µ–Ω–Ω–∞—è –∫–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è —Å –∫—Ä–∞–±–æ–≤—ã–º –º–∏–∫—Å–æ–º, –æ–≥—É—Ä—Ü–æ–º –∏ —Ç–æ–±–∏–∫–æ. 10 —à—Ç—É–∫.'); 
    await updatePrice('–ö–∞–Ω–∞–¥–∞', 450);
    await updatePrice('–†–æ–ª–ª –ø—Ä–æ—Å—Ç–æ –æ–≥—É—Ä–µ—Ü', 270, '–û–≥—É—Ä–µ—Ü'); // –ü–æ–º–µ–Ω—è–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ
    await updatePrice('–°–Ω–µ–∂–Ω–∞—è –∫–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è', 430, '–°–Ω–µ–∂–Ω–∞—è –∫–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è');
    await updatePrice('–û–ø–∞–ª–µ–Ω–Ω—ã–π —Å –ª–æ—Å–æ—Å–µ–º', 480);
    await updatePrice('–•—Ä—É—Å—Ç—è—â–∞—è –∞—Ä–∏–≥–∞—Ç–æ', 490, '–†–∏—Å 100 –≥—Ä, –Ω–æ—Ä–∏ 1 —à—Ç, –∫–∞—Ç–∞–∏—Ñ–∏ 30 –≥—Ä, –∫—Ä–µ–≤–µ—Ç–∫–∏ 20 –≥—Ä, –æ–≥—É—Ä–µ—Ü 20 –≥—Ä, —Å–æ—É—Å –∞—Ä–∏–≥–∞—Ç–æ 20 –≥—Ä, —É–Ω–∞–≥–∏ 10 –≥—Ä');
    await updatePrice('–ó–∞–ø–µ—á–µ–Ω–Ω—ã–π —Å –ª–æ—Å–æ—Å–µ–º', 480);
    await updatePrice('–¢–µ–º–ø—É—Ä–∞ —Å –ª–æ—Å–æ—Å–µ–º', 420);
    await updatePrice('–û—Å—Ç—Ä—ã–π –ª–æ—Å–æ—Å—å', 430);
    await updatePrice('–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è —Å —É–≥—Ä—ë–º', 500, '–†–∏—Å 100 –≥—Ä, –Ω–æ—Ä–∏ 1 —à—Ç, —Å—ã—Ä 30 –≥—Ä, –æ–≥—É—Ä–µ—Ü 20 –≥—Ä, —É–≥–æ—Ä—å 50 –≥—Ä, —É–Ω–∞–≥–∏ 5 –≥—Ä, –∫—É–Ω–∂—É—Ç 5 –≥—Ä');
    await updatePrice('–ü—Ä–æ—Å—Ç–æ –ª–æ—Å–æ—Å—å', 320);
    await updatePrice('–ö—Ä–µ–≤–µ—Ç–∫–∏ —Å —Ç–∞–º–∞–≥–æ', 520, '–†–∏—Å 110 –≥—Ä, —Å—ã—Ä 20 –≥—Ä, –Ω–æ—Ä–∏ 1 —à—Ç, —Ç–æ–±–∏–∫–æ 10 –≥—Ä, –æ–º–ª–µ—Ç 20 –≥—Ä, –æ–≥—É—Ä–µ—Ü 20 –≥—Ä, –∫—Ä–µ–≤–µ—Ç–∫–∏ 40 –≥—Ä, —Å–æ—É—Å —Å–ø–∞–π—Å 20 –≥—Ä');
    await updatePrice('–ß–∏–∫–∫–µ–Ω —Ä–æ–ª–ª', 420);
    
    console.log('\nüçü –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã —Å–Ω—ç–∫–æ–≤...');
    
    // –°–Ω—ç–∫–∏
    await updatePrice('–ù–∞–≥–≥–µ—Ç—Å—ã –∫—É—Ä–∏–Ω—ã–µ —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º —Ñ—Ä–∏', 150, '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏ 200 –≥—Ä');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –∫–∞—Ä—Ç–æ—à–∫—É
    await addProduct(
      '–ö–∞—Ä—Ç–æ—à–∫–∞ —Ñ—Ä–∏',
      '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏ 200 –≥—Ä',
      180,
      null, // —É–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      'snacks',
      0,
      1
    );
    
    console.log('\nüçó –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –∫—Ä—ã–ª—å–µ–≤...');
    
    // –ö—Ä—ã–ª—å—è - –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞–µ–º
    await updatePrice('–ö—Ä—ã–ª—å—è –∫—É—Ä–∏–Ω—ã–µ 12 —à—Ç', 590);
    await updatePrice('–ö—Ä—ã–ª—å—è –∫—É—Ä–∏–Ω—ã–µ 18 —à—Ç', 850, '–ö—Ä—ã–ª—å—è –∫—É—Ä–∏–Ω—ã–µ 18 —à—Ç + Coca-Cola 0.3–ª');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫—Ä—ã–ª—å–µ–≤
    await addProduct(
      '–ö—Ä—ã–ª—å—è –∫—É—Ä–∏–Ω—ã–µ 25 —à—Ç',
      '–ö—Ä—ã–ª—å—è –∫—É—Ä–∏–Ω—ã–µ 25 —à—Ç –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏',
      1090,
      null,
      'wings',
      0,
      1
    );
    
    await addProduct(
      '–ö—Ä—ã–ª—å—è –∫—É—Ä–∏–Ω—ã–µ 32 —à—Ç',
      '–ö—Ä—ã–ª—å—è –∫—É—Ä–∏–Ω—ã–µ 32 —à—Ç —Å 3 —Å–æ—É—Å–∞–º–∏',
      1590,
      null,
      'wings',
      0,
      1
    );
    
    console.log('\nü•´ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã —Å–æ—É—Å–æ–≤...');
    
    // –°–æ—É—Å—ã
    await updatePrice('–°–æ–µ–≤—ã–π —Å–æ—É—Å', 70);
    await updatePrice('–í–∞—Å–∞–±–∏', 80);
    await updatePrice('–ò–º–±–∏—Ä—å', 70);
    
    console.log('\nüçï –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –ø–∏—Ü—Ü—ã...');
    
    // –ü–∏—Ü—Ü–∞
    await updatePrice('–ü–∏—Ü—Ü–∞ –ß–µ—Ç—ã—Ä–µ —Å—ã—Ä–∞', 590, '–ß–µ—Ç—ã—Ä–µ —Å—ã—Ä–∞');
    await updatePrice('–ü–∏—Ü—Ü–∞ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏', 500, '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏');
    await updatePrice('–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', 450, '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–∏—Ü—Ü—ã
    await addProduct(
      '–ü–∏—Ü—Ü–∞ —Å –≥—Ä—É—à–µ–π –∏ –≥–æ—Ä–≥–æ–Ω–∑–æ–ª–æ–π',
      '–° –≥—Ä—É—à–µ–π –∏ –≥–æ—Ä–≥–æ–Ω–∑–æ–ª–æ–π',
      620,
      null,
      'pizza',
      0,
      1
    );
    
    await addProduct(
      '–ü–∏—Ü—Ü–∞ —Å –∫—É—Ä–∏—Ü–µ–π –∏ —Ç–æ–º–∞—Ç–∞–º–∏',
      '–ö—É—Ä–∏—Ü–∞ –∏ —Ç–æ–º–∞—Ç—ã',
      520,
      null,
      'pizza',
      0,
      1
    );
    
    console.log('\n‚úÖ –í—Å–µ —Ü–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function checkResult() {
  return new Promise((resolve, reject) => {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
    db.all('SELECT name, price, category FROM products ORDER BY category, name', (err, rows) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', err.message);
        reject(err);
      } else {
        console.log('\nüìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã:');
        
        const categories = {
          'rolls': 'üç£ –†–æ–ª–ª—ã',
          'snacks': 'üçü –°–Ω—ç–∫–∏', 
          'wings': 'üçó –ö—Ä—ã–ª—å—è',
          'sauces': 'ü•´ –°–æ—É—Å—ã',
          'pizza': 'üçï –ü–∏—Ü—Ü–∞',
          'drinks': 'ü•§ –ù–∞–ø–∏—Ç–∫–∏',
          'sets': 'üç± –°–µ—Ç—ã'
        };
        
        let currentCategory = '';
        rows.forEach(row => {
          if (row.category !== currentCategory) {
            currentCategory = row.category;
            console.log(`\n${categories[currentCategory] || currentCategory}:`);
          }
          console.log(`  ${row.name}: ${row.price} —Å–æ–º`);
        });
        
        resolve();
      }
    });
  });
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã
    await updatePrices();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await checkResult();
    
    console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error.message);
    process.exit(1);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    db.close((err) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err.message);
      } else {
        console.log('üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
      }
      process.exit(0);
    });
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main();
