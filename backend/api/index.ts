import express from 'express';
import sqlite3 from 'sqlite3';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import cors from 'cors';
import { DatabaseUser, DatabaseOrder, Product, Order, OrderItem } from '../src/types';
import helmet from 'helmet';
import compression from 'compression';
import path from 'path';
import multer from 'multer';
import fs from 'fs';
import https from 'https';
import { sendNewOrderNotification, sendStatusUpdateNotification, getBotInfo, registerTelegramUser, getUserOrders, getUserOrder } from '../src/telegramBot';

// Telegram Bot –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TELEGRAM_BOT_TOKEN = '8336008623:AAHWO3vRgVceBeJvjMVaPBdZMkNTBB-MHCc';
const TELEGRAM_ADMIN_GROUP_ID = '-1002728692510';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Bot API
async function sendTelegramNotification(orderData: any): Promise<void> {
  try {
    console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –∑–∞–∫–∞–∑–µ:', orderData.orderNumber);
    console.log('üìã –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:', JSON.stringify(orderData, null, 2));
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    let itemsText = "";
    if (orderData.items && orderData.items.length > 0) {
      for (const item of orderData.items) {
        if (typeof item === 'object' && item.product) {
          itemsText += `‚Ä¢ ${item.product.name || '–¢–æ–≤–∞—Ä'} x${item.quantity} - ${item.product.price} —Å–æ–º\n`;
        } else if (typeof item === 'object' && item.name) {
          itemsText += `‚Ä¢ ${item.name} x${item.quantity} - ${item.price} —Å–æ–º\n`;
        } else {
          itemsText += `‚Ä¢ ${item}\n`;
        }
      }
    } else {
      itemsText = "–¢–æ–≤–∞—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã";
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ë–∏—à–∫–µ–∫–µ (UTC+6)
    const bishkekTime = new Date();
    bishkekTime.setHours(bishkekTime.getHours() + 6);
    const currentTime = bishkekTime.toLocaleString('ru-RU', {
      timeZone: 'Asia/Bishkek',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
    
    const message = `
üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!

üìã –ó–∞–∫–∞–∑ #${orderData.orderNumber}
üë§ –ö–ª–∏–µ–Ω—Ç: ${orderData.customerName}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${orderData.customerPhone}
üìç –ê–¥—Ä–µ—Å: ${orderData.deliveryAddress || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üí∞ –°—É–º–º–∞: ${orderData.totalAmount} —Å–æ–º
‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã

üõí –¢–æ–≤–∞—Ä—ã:
${itemsText}

‚è∞ –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: ${currentTime} –≤—Ä–µ–º—è –±–∏—à–∫–µ–∫
    `.trim();
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Telegram API...');
    console.log('üîë –¢–æ–∫–µ–Ω:', TELEGRAM_BOT_TOKEN.substring(0, 20) + '...');
    console.log('üë• ID –≥—Ä—É–ø–ø—ã:', TELEGRAM_ADMIN_GROUP_ID);
    console.log('üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:', message.substring(0, 100) + '...');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram Bot API
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_ADMIN_GROUP_ID,
        text: message,
        parse_mode: 'HTML'
      })
    });
    
    console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç Telegram API:', response.status, response.statusText);
    
    if (!response.ok) {
      const errorData = await response.json() as any;
      console.error('‚ùå Telegram API error:', errorData);
      throw new Error(`Telegram API error: ${errorData.description || 'Unknown error'}`);
    }
    
    const responseData = await response.json();
    console.log('‚úÖ –û—Ç–≤–µ—Ç Telegram API:', responseData);
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram —É—Å–ø–µ—à–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', error);
  }
}

// –¢–∏–ø—ã –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
interface StatsResult {
  total_orders: number;
  total_revenue: number;
  active_orders: number;
}

const app = express();
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadDir = path.join(__dirname, '../uploads');
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    
    cb(null, uploadDir);
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'));
    }
  }
});

// –û—Ç–¥–µ–ª—å–Ω—ã–π multer –¥–ª—è memoryStorage (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–æ–≤)
const uploadMemory = multer({ 
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'));
    }
  }
});

// Middleware
app.use(helmet({
  crossOriginEmbedderPolicy: false,
  crossOriginOpenerPolicy: false,
  crossOriginResourcePolicy: false
}));
app.use(compression());
app.use(cors({
  origin: process.env.CORS_ORIGIN || '*',
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
app.use((req, res, next) => {
  res.setHeader('Cross-Origin-Opener-Policy', 'same-origin');
  res.setHeader('Cross-Origin-Embedder-Policy', 'require-corp');
  res.setHeader('Cross-Origin-Resource-Policy', 'cross-origin');
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  next();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤
app.options('*', cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ limit: '50mb', extended: true }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
app.use('/uploads', express.static(path.join(__dirname, '../uploads'), {
  setHeaders: (res, filePath) => {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Cache-Control', 'public, max-age=31536000');
    res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Accept, Range');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
    const ext = path.extname(filePath).toLowerCase();
    
    switch (ext) {
      case '.jpg':
      case '.jpeg':
      res.setHeader('Content-Type', 'image/jpeg');
        break;
      case '.png':
      res.setHeader('Content-Type', 'image/png');
        break;
      case '.gif':
      res.setHeader('Content-Type', 'image/gif');
        break;
      case '.webp':
        res.setHeader('Content-Type', 'image/webp');
        break;
      case '.svg':
        res.setHeader('Content-Type', 'image/svg+xml');
        break;
      default:
        // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
        res.setHeader('Content-Type', 'application/octet-stream');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    res.setHeader('Accept-Ranges', 'bytes');
    res.setHeader('X-Content-Type-Options', 'nosniff');
    
    console.log('üìÅ –û–±—Å–ª—É–∂–∏–≤–∞–µ–º —Ñ–∞–π–ª:', filePath, 'Content-Type:', res.getHeader('Content-Type'));
  }
}));



// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
app.use('/images', express.static(path.join(__dirname, '../public/images'), {
  setHeaders: (res, filePath) => {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Cache-Control', 'public, max-age=31536000');
    res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Accept, Range');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
    const ext = path.extname(filePath).toLowerCase();
    
    switch (ext) {
      case '.jpg':
      case '.jpeg':
        res.setHeader('Content-Type', 'image/jpeg');
        break;
      case '.png':
        res.setHeader('Content-Type', 'image/png');
        break;
      case '.gif':
        res.setHeader('Content-Type', 'image/gif');
        break;
      case '.webp':
        res.setHeader('Content-Type', 'image/webp');
        break;
      case '.svg':
        res.setHeader('Content-Type', 'image/svg+xml');
        break;
      default:
        res.setHeader('Content-Type', 'application/octet-stream');
    }
    
    res.setHeader('Accept-Ranges', 'bytes');
    res.setHeader('X-Content-Type-Options', 'nosniff');
    
    console.log('üñºÔ∏è –û–±—Å–ª—É–∂–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', filePath, 'Content-Type:', res.getHeader('Content-Type'));
  }
}));

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è Vercel –∏—Å–ø–æ–ª—å–∑—É–µ–º in-memory –∏–ª–∏ –≤–Ω–µ—à–Ω—é—é –ë–î)
let db: sqlite3.Database;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const initDatabase = () => {
  try {
  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  if (!fs.existsSync('./data')) {
    fs.mkdirSync('./data', { recursive: true });
  }
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  db = new sqlite3.Database('./data/mnogo_rolly.db');
    console.log('–§–∞–π–ª–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
  console.log('–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...');
  
  db.serialize(() => {
    try {
    // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    db.run(`CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      username TEXT,
      email TEXT UNIQUE NOT NULL,
      phone TEXT,
      address TEXT,
      password TEXT NOT NULL,
      role TEXT DEFAULT 'user',
      is_admin BOOLEAN DEFAULT 0,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);

    // –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    db.run(`CREATE TABLE IF NOT EXISTS products (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      description TEXT,
      price REAL NOT NULL,
      image_url TEXT,
      mobile_image_url TEXT,
      category TEXT,
      is_popular BOOLEAN DEFAULT 0,
      is_available BOOLEAN DEFAULT 1,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);

    // –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
    db.run(`CREATE TABLE IF NOT EXISTS orders (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      order_number TEXT UNIQUE NOT NULL,
      user_id INTEGER,
      customer_name TEXT NOT NULL,
      customer_phone TEXT NOT NULL,
      customer_address TEXT NOT NULL,
      total_amount REAL NOT NULL,
      status TEXT DEFAULT 'pending',
      payment_method TEXT DEFAULT 'cash',
      notes TEXT,
      payment_proof TEXT,
      payment_proof_date DATETIME,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (user_id) REFERENCES users (id)
    )`);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É updated_at –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç (–º–∏–≥—Ä–∞—Ü–∏—è)
    db.run(`ALTER TABLE orders ADD COLUMN updated_at DATETIME DEFAULT CURRENT_TIMESTAMP`, (err) => {
      if (err && !err.message.includes('duplicate column name')) {
        console.log('Column updated_at already exists or error:', err.message);
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É customer_address –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    db.run(`ALTER TABLE orders ADD COLUMN customer_address TEXT`, (err) => {
      if (err && !err.message.includes('duplicate column name')) {
        console.log('Column customer_address already exists or error:', err.message);
      } else {
        console.log('Column customer_address added successfully');
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É mobile_image_url –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    db.run(`ALTER TABLE products ADD COLUMN mobile_image_url TEXT`, (err) => {
      if (err && !err.message.includes('duplicate column name')) {
        console.log('Column mobile_image_url already exists or error:', err.message);
      } else {
        console.log('Column mobile_image_url added successfully');
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É username –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    db.run(`ALTER TABLE users ADD COLUMN username TEXT`, (err) => {
      if (err && !err.message.includes('duplicate column name')) {
        console.log('Column username already exists or error:', err.message);
      } else {
        console.log('Column username added successfully');
      }
    });

    // –ö–æ–ø–∏—Ä—É–µ–º name –≤ username –µ—Å–ª–∏ username –ø—É—Å—Ç–æ–π
    db.run(`UPDATE users SET username = name WHERE username IS NULL OR username = ''`, (err) => {
      if (err) {
        console.log('Error updating username from name:', err.message);
      } else {
        console.log('Username updated from name successfully');
      }
    });

    // –¢–∞–±–ª–∏—Ü–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    db.run(`CREATE TABLE IF NOT EXISTS bank_settings (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      bank_name TEXT NOT NULL,
      bank_link TEXT NOT NULL,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
    db.get('SELECT COUNT(*) as count FROM bank_settings', (err: any, result: any) => {
      if (err) {
        return;
      }
      
      if (result.count === 0) {
        db.run(`INSERT INTO bank_settings (bank_name, bank_link) VALUES (?, ?)`, 
          ['MBank', 'https://app.mbank.kg/qr#00020101021132440012c2c.mbank.kg01020210129965000867861302125204999953034175908YBRAI%20S.630462d0']);
      }
    });

    // –¢–∞–±–ª–∏—Ü–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–∞
    db.run(`CREATE TABLE IF NOT EXISTS order_items (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      order_id INTEGER NOT NULL,
      product_id INTEGER NOT NULL,
      quantity INTEGER NOT NULL,
      price REAL NOT NULL,
      FOREIGN KEY (order_id) REFERENCES orders (id),
      FOREIGN KEY (product_id) REFERENCES products (id)
    )`);

    // –¢–∞–±–ª–∏—Ü–∞ –∫–æ—Ä–∑–∏–Ω—ã
    db.run(`CREATE TABLE IF NOT EXISTS cart (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user_id INTEGER NOT NULL,
      product_id INTEGER NOT NULL,
      quantity INTEGER NOT NULL DEFAULT 1,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (user_id) REFERENCES users (id),
      FOREIGN KEY (product_id) REFERENCES products (id)
    )`);

    // –¢–∞–±–ª–∏—Ü–∞ —Å–º–µ–Ω
    db.run(`CREATE TABLE IF NOT EXISTS shifts (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      shift_number TEXT NOT NULL UNIQUE,
      opened_at DATETIME NOT NULL,
      closed_at DATETIME,
      opened_by INTEGER NOT NULL,
      closed_by INTEGER,
      status TEXT NOT NULL DEFAULT 'open',
      notes TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (opened_by) REFERENCES users (id),
      FOREIGN KEY (closed_by) REFERENCES users (id)
    )`);

    // –¢–∞–±–ª–∏—Ü–∞ —á–µ–∫–æ–≤
    db.run(`CREATE TABLE IF NOT EXISTS receipts (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      order_id INTEGER NOT NULL,
      payment_method TEXT NOT NULL,
      amount REAL NOT NULL,
      receipt_file TEXT,
      note TEXT,
      status TEXT NOT NULL DEFAULT 'pending',
      timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (order_id) REFERENCES orders (id)
    )`);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const adminPassword = bcrypt.hashSync('admin123', 10);
    db.run(`INSERT OR IGNORE INTO users (email, password, name, role, is_admin) VALUES (?, ?, ?, ?, ?)`, 
      ['admin@mnogo-rolly.ru', adminPassword, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 'admin', 1]);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
    const denmakPassword = bcrypt.hashSync('denmak2405', 10);
    db.run(`INSERT OR IGNORE INTO users (email, password, name, role, is_admin) VALUES (?, ?, ?, ?, ?)`, 
      ['admin@gmail.com', denmakPassword, 'Denmak', 'admin', 1]);
    
    // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω

    // –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –±–æ–ª—å—à–µ –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü:', error);
      throw error;
    }
  });
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
try {
initDatabase();
  console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
} catch (error) {
  console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
}

// Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const authenticateToken = (req: any, res: any, next: any) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ message: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
  }

  jwt.verify(token, JWT_SECRET, async (err: any, user: any) => {
  if (err) {
    return res.status(403).json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  db.get('SELECT id, name, email, phone, address, is_admin FROM users WHERE id = ?', [user.id], (dbErr, dbUser: any) => {
    if (dbErr || !dbUser) {
      return res.status(403).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    req.user = {
      ...user,
      is_admin: dbUser.is_admin === 1
    };
    next();
  });
});
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞
const requireAdmin = (req: any, res: any, next: any) => {
  if (!req.user.is_admin) {
    return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
  }
  next();
};

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/api/health', (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if (!db) {
      return res.status(500).json({ 
        status: 'ERROR', 
        message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞',
        error: 'Database not initialized'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.get('SELECT 1 as check', (err, result) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
        return res.status(500).json({ 
          status: 'ERROR', 
          message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
          error: err instanceof Error ? err.message : 'Database error'
        });
      }
      
      res.json({ 
        status: 'OK', 
        message: 'Mnogo Rolly API —Ä–∞–±–æ—Ç–∞–µ—Ç',
        database: 'connected',
        timestamp: new Date().toISOString()
      });
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ health check:', error);
    res.status(500).json({ 
      status: 'ERROR', 
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
app.get('/api/user/me', authenticateToken, (req: any, res) => {
  const userId = req.user.id;
  
  db.get('SELECT id, name, email, phone, address, is_admin FROM users WHERE id = ?', [userId], (err, user: any) => {
    if (err) {
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }
    
    if (!user) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json({
      id: user.id,
      name: user.name,
      email: user.email,
      phone: user.phone,
      address: user.address,
      isAdmin: user.is_admin === 1
    });
  });
});



// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —á–µ–∫–æ–≤
app.post('/api/receipts', uploadMemory.single('receiptFile'), async (req, res) => {
  try {
    const { orderId, paymentMethod, amount, note } = req.body;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —á–µ–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    let receiptFileUrl = null;
    if (req.file) {
      const fileName = `receipt-${Date.now()}-${Math.round(Math.random() * 1E9)}.jpg`;
      const filePath = path.join(__dirname, '../uploads/receipts', fileName);
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      const uploadsDir = path.join(__dirname, '../uploads/receipts');
      if (!fs.existsSync(uploadsDir)) {
        fs.mkdirSync(uploadsDir, { recursive: true });
      }
      
      fs.writeFileSync(filePath, req.file.buffer);
      receiptFileUrl = `/uploads/receipts/${fileName}`;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const receiptData = {
      orderId: parseInt(orderId),
      paymentMethod,
      amount: parseFloat(amount),
      receiptFile: receiptFileUrl,
      note,
      status: 'pending',
      timestamp: new Date().toISOString()
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.run(`
      INSERT INTO receipts (order_id, payment_method, amount, receipt_file, note, status, timestamp)
      VALUES (?, ?, ?, ?, ?, ?, ?)
    `, [
      receiptData.orderId,
      receiptData.paymentMethod,
      receiptData.amount,
      receiptData.receiptFile,
      receiptData.note,
      receiptData.status,
      receiptData.timestamp
    ], function(err) {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–∞ –≤ –ë–î:', err);
        return res.status(500).json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
          error: err instanceof Error ? err.message : 'Database error'
        });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      db.run('UPDATE orders SET payment_status = ?, payment_method = ? WHERE id = ?', 
        ['paid', paymentMethod, orderId], (updateErr) => {
        if (updateErr) {
          console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', updateErr);
        }
      });
      
      res.status(201).json({
        success: true,
        receipt: { ...receiptData, id: this.lastID },
        message: '–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω'
      });
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ–∫–∞:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ–∫–∞',
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    });
  }
});

app.get('/api/receipts', authenticateToken, requireAdmin, async (req, res) => {
  try {
    db.all(`
      SELECT r.*, o.customer_name, o.phone, o.address, o.total_amount
      FROM receipts r
      LEFT JOIN orders o ON r.order_id = o.id
      ORDER BY r.timestamp DESC
    `, (err, receipts) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–æ–≤:', err);
        return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ–∫–æ–≤' });
      }
      
      res.json(receipts);
    });
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ–∫–æ–≤' });
  }
});

app.patch('/api/receipts/:id/status', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { status } = req.body;
    const { id } = req.params;
    
    db.run('UPDATE receipts SET status = ? WHERE id = ?', [status, id], function(err) {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —á–µ–∫–∞:', err);
        return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞' });
      }
      
      if (this.changes === 0) {
        return res.status(404).json({ message: '–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      
      res.json({ success: true, message: '–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω' });
    });
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞' });
  }
});

// –ü—Ä–æ–¥—É–∫—Ç—ã
app.get('/api/products', (req, res) => {

  console.log('üì± Origin:', req.headers.origin);
  console.log('üì± Referer:', req.headers.referer);
  
  db.all('SELECT * FROM products WHERE is_available = 1 ORDER BY created_at DESC', (err, products) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –ë–î:', err);
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤' });
    }
    

    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–∞–∫ –≤ russkii-portal)
    const productsWithImages = products.map((product: any) => {
      
      let processedImageUrl = product.image_url;
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, –¥–µ–ª–∞–µ–º –µ–≥–æ –ø–æ–ª–Ω—ã–º
      if (product.image_url && product.image_url.startsWith('/uploads/')) {
        processedImageUrl = `https://147.45.141.113:3001${product.image_url}`;
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –≤–Ω–µ—à–Ω–∏–π URL (Unsplash –∏–ª–∏ –¥—Ä—É–≥–∏–µ), –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      if (product.image_url && (product.image_url.startsWith('http://') || product.image_url.startsWith('https://'))) {
        processedImageUrl = product.image_url;
      }
      
              // –ï—Å–ª–∏ —ç—Ç–æ base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if (product.image_url && product.image_url.startsWith('data:image/')) {
          processedImageUrl = product.image_url;
        }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —ç—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ Unsplash, –æ—Å—Ç–∞–≤–ª—è–µ–º null
      if (!product.image_url || product.image_url === '' || product.image_url.includes('unsplash.com')) {
        processedImageUrl = null;
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å mobile_image_url, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ fallback
      if (!processedImageUrl && product.mobile_image_url && product.mobile_image_url !== '' && !product.mobile_image_url.includes('unsplash.com')) {
        if (product.mobile_image_url.startsWith('/uploads/')) {
          processedImageUrl = `https://147.45.141.113:3001${product.mobile_image_url}`;
        } else if (product.mobile_image_url.startsWith('data:image/')) {
          processedImageUrl = product.mobile_image_url;
        } else if (product.mobile_image_url.startsWith('http://') || product.mobile_image_url.startsWith('https://')) {
          processedImageUrl = product.mobile_image_url;
        }
      }
      
        return {
          ...product,
        image_url: processedImageUrl,
        original_image_url: product.image_url, // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        isAvailable: product.is_available === 1, // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ boolean –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        isPopular: product.is_popular === 1 // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ boolean –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
      };
    });
    

    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.setHeader('X-Products-Count', productsWithImages.length);
    res.setHeader('X-Products-With-Images', productsWithImages.filter(p => p.original_image_url && p.original_image_url !== '').length);
    
    res.json(productsWithImages);
  });
});

// –ó–∞–∫–∞–∑—ã
app.post('/api/orders', authenticateToken, (req: any, res) => {
  try {
    const userId = req.user.id;
    const { customer, items, total, paymentMethod, notes } = req.body;

    if (!customer || !items || !total || !paymentMethod) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
      });
    }

    const orderNumber = 'MR-' + Date.now() + '-' + Math.floor(Math.random() * 1000);
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: customer.notes + –æ–±—â–∏–µ notes
    const combinedNotes = [customer.notes, notes].filter(note => note && note.trim()).join(' | ');

    const sql = `
      INSERT INTO orders (
        order_number, user_id, customer_name, customer_phone,
        customer_address, total_amount, status, payment_method, notes
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    `;
    const params = [
      orderNumber, userId, customer.name, customer.phone,
      customer.address || '', total, 'pending', paymentMethod, combinedNotes || ''
    ];

    db.run(sql, params, function(err) {
      if (err) {
        return res.status(500).json({
          success: false,
          message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞',
          error: err instanceof Error ? err.message : 'Database error'
        });
      }

      const orderId = this.lastID;
      let itemsAdded = 0;
      let totalItems = items.length;

      items.forEach((item: any, index: number) => {
        db.run(`
          INSERT INTO order_items (order_id, product_id, quantity, price)
          VALUES (?, ?, ?, ?)
        `, [orderId, item.product.id, item.quantity, item.product.price], (err) => {
          if (err) {
            } else {
            itemsAdded++;
          }

          if (itemsAdded === totalItems) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            sendNewOrderNotification({
              id: orderId,
              orderNumber,
              customerName: customer.name,
              customerPhone: customer.phone,
              deliveryAddress: customer.address,
              totalAmount: total,
              status: 'pending',
              createdAt: new Date().toISOString(),
              items: items
            } as any).catch(console.error);

            res.json({
              success: true,
              message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
              data: {
                orderId,
                orderNumber
              }
            });
          }
        });
      });

      if (totalItems === 0) {
        res.json({
          success: true,
          message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
          data: {
            orderId,
            orderNumber
          }
        });
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)

// –ì–æ—Å—Ç–µ–≤—ã–µ –∑–∞–∫–∞–∑—ã (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
app.post('/api/orders/guest', (req: any, res) => {
  try {
    const { customer, items, total, paymentMethod, notes } = req.body;

    if (!customer || !items || !total || !paymentMethod) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
      });
    }

    const orderNumber = 'MR-GUEST-' + Date.now() + '-' + Math.floor(Math.random() * 1000);
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: customer.notes + –æ–±—â–∏–µ notes
    const combinedNotes = [customer.notes, notes].filter(note => note && note.trim()).join(' | ');

    const sql = `
      INSERT INTO orders (
        order_number, user_id, customer_name, customer_phone,
        customer_address, total_amount, status, payment_method, notes
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    `;
    const params = [
      orderNumber, null, customer.name, customer.phone,
      customer.address || '', total, 'pending', paymentMethod, combinedNotes || ''
    ];

    db.run(sql, params, function(err) {
      if (err) {
        return res.status(500).json({
          success: false,
          message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞',
          error: err instanceof Error ? err.message : 'Database error'
        });
      }

      const orderId = this.lastID;
      let itemsAdded = 0;
      let totalItems = items.length;

      items.forEach((item: any, index: number) => {
        db.run(`
          INSERT INTO order_items (order_id, product_id, quantity, price)
          VALUES (?, ?, ?, ?)
        `, [orderId, item.product.id, item.quantity, item.product.price], (err) => {
          if (err) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑:', err);
          } else {
            itemsAdded++;
          }

          if (itemsAdded === totalItems) {
            console.log('üì¶ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram...');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —á–µ—Ä–µ–∑ Bot API
            const orderData = {
              id: orderId,
              orderNumber,
              customerName: customer.name,
              customerPhone: customer.phone,
              deliveryAddress: customer.address,
              totalAmount: total,
              status: 'pending',
              createdAt: new Date().toISOString(),
              items: items
            };
            
            console.log('üì§ –î–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', JSON.stringify(orderData, null, 2));
            
            sendTelegramNotification(orderData).catch((error) => {
              console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            });

            res.json({
              success: true,
              message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
              data: {
                orderId,
                orderNumber
              }
            });
          }
        });
      });

      if (totalItems === 0) {
        res.json({
          success: true,
          message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
          data: {
            orderId,
            orderNumber
          }
        });
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É
app.get('/api/orders/guest/:orderNumber', (req, res) => {
  const { orderNumber } = req.params;

  db.get(`
    SELECT o.*
    FROM orders o
    WHERE o.order_number = ? AND o.user_id IS NULL
  `, [orderNumber], (err, order) => {
    if (err) {
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞', error: err instanceof Error ? err.message : 'Database error' });
    }
    if (!order) {
      return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞
    console.log('Loading items for guest order:', (order as any).id);
    
    db.all('SELECT * FROM order_items WHERE order_id = ?', [(order as any).id], (err, items) => {
      if (err) {
        console.error('Error loading items for guest order:', (order as any).id, err);
        return res.json({
          ...(order as any),
          items: [],
          items_summary: '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
        });
      }
      
      console.log('Items for guest order:', (order as any).id, items);
      const orderWithItems = {
        ...(order as any),
        items: items || [],
        items_summary: items && items.length > 0 ? 
          items.map((item: any) => item.product_name + ' x' + item.quantity).join(', ') : 
          '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
      };
      
      res.json(orderWithItems);
    });
  });
});

// –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É
app.get('/api/orders/status/:orderNumber', (req, res) => {
  const { orderNumber } = req.params;

  db.get(`
    SELECT o.*
    FROM orders o
    WHERE o.order_number = ?
  `, [orderNumber], (err, order) => {
    if (err) {
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞', error: err instanceof Error ? err.message : 'Database error' });
    }
    if (!order) {
      return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞
    console.log('Loading items for order:', (order as any).id);
    
    db.all('SELECT * FROM order_items WHERE order_id = ?', [(order as any).id], (err, items) => {
      if (err) {
        console.error('Error loading items for order:', (order as any).id, err);
        return res.json({
          ...(order as any),
          items: [],
          items_summary: '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
        });
      }
      
      console.log('Items for order:', (order as any).id, items);
      const orderWithItems = {
        ...(order as any),
        items: items || [],
        items_summary: items && items.length > 0 ? 
          items.map((item: any) => item.product_name + ' x' + item.quantity).join(', ') : 
          '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
      };
      
      res.json(orderWithItems);
    });
  });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ —á–µ–∫–∞
app.get('/api/orders/payment-proof/:filename', (req, res) => {
  const { filename } = req.params;
  const filePath = path.join(__dirname, '../uploads', filename);
  
  if (fs.existsSync(filePath)) {
    res.sendFile(filePath);
  } else {
    res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–∫–∞–∫ –≤ russkii-portal)
app.post('/api/upload', upload.single('image'), (req, res) => {
  console.log('üî• UPLOAD: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
  console.log('üî• UPLOAD: File:', req.file ? req.file.filename : '–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
  
  if (!req.file) {
    console.log("‚ùå UPLOAD: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ");
    return res.status(400).json({ message: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ" });
  }
  
  try {
    // –°–æ–∑–¥–∞–µ–º URL –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É (–∫–∞–∫ –≤ russkii-portal)
    const imageUrl = `/uploads/${req.file.filename}`;
    console.log(`‚úÖ UPLOAD: –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${imageUrl}`);
    
    res.json({ 
      message: "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω", 
      imageUrl: imageUrl,
      file: req.file
    });
  } catch (error) {
    console.error("‚ùå UPLOAD: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞" });
  }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∫–∞–∫ –≤ russkii-portal)
app.post('/api/upload-images', upload.array('images', 10), (req, res) => {
  try {
    console.log("üî• UPLOAD-IMAGES: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π");
    console.log("üî• UPLOAD-IMAGES: Files count:", req.files ? req.files.length : 0);
    
    if (!req.files || req.files.length === 0) {
      console.log("‚ùå UPLOAD-IMAGES: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
      return res.status(400).json({ message: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã" });
    }
    
    // –°–æ–∑–¥–∞–µ–º URL –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
    const imageUrls: string[] = [];
    const files = req.files as Express.Multer.File[];
    
    files.forEach(file => {
      const imageUrl = `/uploads/${file.filename}`;
      imageUrls.push(imageUrl);
      console.log(`‚úÖ UPLOAD-IMAGES: –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${imageUrl}`);
    });
    
    res.json({ 
      message: "–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", 
      imageUrls: imageUrls
    });
  } catch (error) {
    console.error("‚ùå UPLOAD-IMAGES: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤" });
  }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ
app.post('/api/orders/payment-proof', uploadMemory.single('file'), (req, res) => {
  console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–∞:', { 
    file: req.file ? req.file.originalname : '–Ω–µ—Ç —Ñ–∞–π–ª–∞',
    body: req.body 
  });
  
  if (!req.file) {
    return res.status(400).json({ success: false, error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
  }

  const { orderId, orderNumber } = req.body;
  const fileName = 'receipt-' + Date.now() + '-' + Math.round(Math.random() * 1E9) + '.jpg';
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É uploads –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const uploadsDir = path.join(__dirname, '../uploads');
    if (!fs.existsSync(uploadsDir)) {
      fs.mkdirSync(uploadsDir, { recursive: true });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    const filePath = path.join(uploadsDir, fileName);
    fs.writeFileSync(filePath, req.file.buffer);
    
    // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è —Ñ–∞–π–ª–∞
    const fileUrl = 'https://147.45.141.113:3001/uploads/' + fileName;
    
    console.log('–û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ:', { orderId, orderNumber, fileUrl });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å URL —á–µ–∫–∞
    console.log('–ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ ID:', { orderId, orderNumber });
    
    // –ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ ID –∏–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞
    let searchQuery = '';
    let searchParams: any[] = [];
    
    if (orderId && orderId !== 'temp') {
      searchQuery = 'SELECT id, order_number FROM orders WHERE id = ?';
      searchParams = [orderId];
    } else if (orderNumber) {
      searchQuery = 'SELECT id, order_number FROM orders WHERE order_number = ?';
      searchParams = [orderNumber];
    } else {
      console.log('–ù–µ—Ç orderId –∏–ª–∏ orderNumber –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞');
      return res.status(400).json({ success: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω ID –∏–ª–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞' });
    }
    
    db.get(searchQuery, searchParams, (err, order) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞:', err);
        return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞' });
      }
      
      if (!order) {
        console.error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω:', { orderId, orderNumber });
        return res.status(404).json({ success: false, error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      
      console.log('–ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', order);
      
      // –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    db.run(
        'UPDATE orders SET payment_proof = ?, payment_proof_date = CURRENT_TIMESTAMP WHERE id = ?',
        [fileUrl, (order as any).id],
      function(err) {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã:', err);
          return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' });
        }
          
          console.log('–ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ:', { changes: this.changes, fileUrl, orderId: (order as any).id });
        
        res.json({ 
          success: true, 
          message: '–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
          fileUrl: fileUrl
        });
      }
    );
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞' });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.post('/api/admin/orders/:orderNumber/payment-proof', upload.single('file'), authenticateToken, requireAdmin, (req, res) => {
  const { orderNumber } = req.params;
  
  console.log('–ê–¥–º–∏–Ω –æ–±–Ω–æ–≤–ª—è–µ—Ç —á–µ–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞:', { orderNumber, file: req.file?.originalname });
  
  if (!req.file) {
    return res.status(400).json({ success: false, error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
  }

  const fileName = 'receipt-' + Date.now() + '-' + Math.round(Math.random() * 1E9) + '.jpg';
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É uploads –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const uploadsDir = path.join(__dirname, '../uploads');
    if (!fs.existsSync(uploadsDir)) {
      fs.mkdirSync(uploadsDir, { recursive: true });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    const filePath = path.join(uploadsDir, fileName);
    fs.writeFileSync(filePath, req.file.buffer);
    
    // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è —Ñ–∞–π–ª–∞
    const fileUrl = 'https://147.45.141.113:3001/uploads/' + fileName;
    
    // –ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ –Ω–æ–º–µ—Ä—É
    db.get('SELECT id, order_number FROM orders WHERE order_number = ?', [orderNumber], (err, order) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞:', err);
        return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞' });
      }
      
      if (!order) {
        console.error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –Ω–æ–º–µ—Ä—É:', orderNumber);
        return res.status(404).json({ success: false, error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      
      console.log('–ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', order);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
      db.run(
        'UPDATE orders SET payment_proof = ?, payment_proof_date = CURRENT_TIMESTAMP WHERE id = ?',
        [fileUrl, (order as any).id],
        function(err) {
          if (err) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã:', err);
            return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' });
          }
          
          console.log('–ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ:', { changes: this.changes, fileUrl, orderId: (order as any).id });
          
          res.json({ 
            success: true, 
            message: '–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
            fileUrl: fileUrl
          });
        }
      );
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–ï–†–ï–î –æ–±—â–∏–º —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤)
app.get('/api/admin/orders/:id', authenticateToken, requireAdmin, (req, res) => {
  const { id } = req.params;

  console.log('üîç API: Getting order details for ID:', id);
  console.log('üîç API: Request params:', req.params);
  console.log('üîç API: Request headers:', req.headers);

  // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
  db.get('SELECT * FROM orders WHERE id = ?', [id], (err, order: any) => {
    if (err) {
      console.error('Database error getting order:', err);
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞', error: err instanceof Error ? err.message : 'Database error' });
    }
    
    if (!order) {
      return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
    db.all(`
      SELECT 
        oi.*,
        p.name as product_name,
        p.image_url as product_image
      FROM order_items oi
      LEFT JOIN products p ON oi.product_id = p.id
      WHERE oi.order_id = ?
    `, [id], (err, items) => {
      if (err) {
        console.error('Database error getting order items:', err);
        return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–∫–∞–∑–∞', error: err instanceof Error ? err.message : 'Database error' });
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã receipts
      db.get('SELECT * FROM receipts WHERE order_id = ? ORDER BY created_at DESC LIMIT 1', [id], (receiptErr, receipt: any) => {
        const orderDetail = {
          id: order.id,
          order_number: order.order_number,
          customer_name: order.customer_name,
          customer_phone: order.customer_phone,
          customer_address: order.customer_address,
          delivery_address: order.customer_address,
          total_amount: order.total_amount,
          status: order.status,
          payment_method: order.payment_method,
          payment_status: receipt ? 'paid' : 'pending',
          created_at: order.created_at,
          payment_proof: receipt ? receipt.receipt_file : order.payment_proof,
          payment_proof_date: receipt ? receipt.timestamp : order.payment_proof_date,
          notes: order.notes,
          items: items ? items.map((item: any) => ({
            id: item.id,
            product_name: item.product_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä',
            quantity: item.quantity,
            price: item.price,
            total: item.price * item.quantity,
            product_id: item.product_id
          })) : []
        };

        console.log('Order details sent:', {
          id: orderDetail.id,
          order_number: orderDetail.order_number,
          has_notes: !!orderDetail.notes,
          notes_length: orderDetail.notes ? orderDetail.notes.length : 0,
          items_count: orderDetail.items.length,
          has_receipt: !!receipt,
          receipt_file: receipt ? receipt.receipt_file : 'none'
        });

        res.json(orderDetail);
      });
    });
  });
});

app.get('/api/admin/orders', authenticateToken, requireAdmin, (req, res) => {
  const { status, page = 1, limit = 100000 } = req.query;
  const offset = (Number(page) - 1) * Number(limit);
  
  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ GROUP_CONCAT –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  let query = 'SELECT * FROM orders';
  const params: any[] = [];
  
  if (status && status !== 'all') {
    query += ' WHERE status = ?';
    params.push(status);
  }
  
  query += ' ORDER BY created_at DESC LIMIT ? OFFSET ?';
  params.push(Number(limit), offset);

  console.log('Executing orders query:', query, params);

  db.all(query, params, (err, orders) => {
    if (err) {
      console.error('Database error in /api/admin/orders:', err);
      return res.status(500).json({ 
        message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤', 
        error: err instanceof Error ? err.message : 'Database error'
      });
    }
    
    console.log('Found orders:', orders.length);
    console.log('Orders details:', orders.map((o: any) => ({
      id: o.id,
      order_number: o.order_number,
      payment_proof: o.payment_proof,
      payment_proof_date: o.payment_proof_date,
      status: o.status
    })));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã —Å —á–µ–∫–∞–º–∏
    const ordersWithProof = orders.filter((o: any) => o.payment_proof && o.payment_proof.trim() !== '');
    console.log('–ó–∞–∫–∞–∑—ã —Å —á–µ–∫–∞–º–∏:', ordersWithProof.length);
    if (ordersWithProof.length > 0) {
      console.log('–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–æ–≤ —Å —á–µ–∫–∞–º–∏:', ordersWithProof.map((o: any) => ({
        id: o.id,
        order_number: o.order_number,
        payment_proof: o.payment_proof
      })));
    }
    
    if (!orders || orders.length === 0) {
      return res.json([]);
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.all –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const ordersWithItemsPromises = orders.map((order: any) => {
      return new Promise((resolve) => {
        db.all(`
          SELECT 
            oi.*,
            p.name as product_name,
            p.image_url as product_image
          FROM order_items oi
          LEFT JOIN products p ON oi.product_id = p.id
          WHERE oi.order_id = ?
        `, [order.id], (err, items) => {
          let items_summary = '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
          
          if (!err && items && items.length > 0) {
            items_summary = items.map((item: any) => 
              (item.product_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä') + ' x' + item.quantity
            ).join(', ');
          }
          
                  console.log('–ó–∞–∫–∞–∑ —Å items:', { 
                    id: order.id, 
                    order_number: order.order_number,
                    payment_proof: order.payment_proof,
                    payment_proof_date: order.payment_proof_date,
                    items_count: items ? items.length : 0 
                  });
                  
                  // –û—Ç–ª–∞–¥–∫–∞ payment_proof
                  if (order.payment_proof) {
                    console.log('‚úÖ –ó–∞–∫–∞–∑ —Å —á–µ–∫–æ–º –æ–± –æ–ø–ª–∞—Ç–µ:', {
                      id: order.id,
                      order_number: order.order_number,
                      payment_proof_length: order.payment_proof.length,
                      payment_proof_start: order.payment_proof.substring(0, 50)
                    });
                  }
        
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã receipts
            db.get('SELECT * FROM receipts WHERE order_id = ? ORDER BY created_at DESC LIMIT 1', [order.id], (receiptErr, receipt: any) => {
              resolve({
                id: order.id,
                orderNumber: order.order_number,
                customerName: order.customer_name,
                customerPhone: order.customer_phone,
                deliveryAddress: order.customer_address,
                totalAmount: order.total_amount,
                status: order.status,
                paymentMethod: order.payment_method,
                paymentStatus: receipt ? 'paid' : 'pending',
                createdAt: order.created_at,
                paymentProof: receipt ? receipt.receipt_file : order.payment_proof,
                paymentProofDate: receipt ? receipt.timestamp : order.payment_proof_date,
                items: items ? items.map((item: any) => ({
                  id: item.id,
                  productName: item.product_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä',
                  quantity: item.quantity,
                  price: item.price,
                  totalPrice: item.price * item.quantity
                })) : [],
                items_summary: items_summary
              });
            });
        });
      });
    });
    
    Promise.all(ordersWithItemsPromises)
      .then((ordersWithItems) => {
        console.log('Sending response with', ordersWithItems.length, 'orders');
    res.json(ordersWithItems);
      })
      .catch((error) => {
        console.error('Error processing orders:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤' });
      });
  });
});

app.patch('/api/admin/orders/:id/status', authenticateToken, requireAdmin, (req, res) => {
  const { id } = req.params;
  const { status } = req.body;

  console.log('Updating order status:', { id, status });

  if (!status) {
    return res.status(400).json({ message: '–°—Ç–∞—Ç—É—Å –Ω–µ —É–∫–∞–∑–∞–Ω' });
  }

  const validStatuses = ['pending', 'preparing', 'ready', 'delivering', 'delivered', 'cancelled'];
  if (!validStatuses.includes(status)) {
    return res.status(400).json({ message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å' });
  }

  db.run('UPDATE orders SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?', [status, id], function(err) {
    if (err) {
      console.error('Database error updating order status:', err);
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', error: err instanceof Error ? err.message : 'Database error' });
    }
    
    if (this.changes === 0) {
      return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    console.log('Order status updated successfully:', { id, status, changes: this.changes });
    res.json({ message: '–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω', status });
  });
});

// Telegram Bot API
app.get('/api/admin/telegram/config', authenticateToken, requireAdmin, (req, res) => {
  const config = {
    botToken: process.env.TELEGRAM_BOT_TOKEN || '',
    chatId: process.env.TELEGRAM_CHAT_ID || '',
    isConfigured: !!(process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_CHAT_ID)
  };
  res.json(config);
});



// API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
app.get('/api/admin/products', authenticateToken, requireAdmin, (req, res) => {
  db.all('SELECT * FROM products ORDER BY created_at DESC', (err, products) => {
    if (err) {
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤' });
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
    const productsWithPlaceholders = products.map((product: any) => {
      let processedImageUrl = product.image_url;
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, –¥–µ–ª–∞–µ–º –µ–≥–æ –ø–æ–ª–Ω—ã–º
      if (product.image_url && product.image_url.startsWith('/uploads/')) {
        processedImageUrl = `https://147.45.141.113:3001${product.image_url}`;
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –≤–Ω–µ—à–Ω–∏–π URL, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      if (product.image_url && (product.image_url.startsWith('http://') || product.image_url.startsWith('https://'))) {
        processedImageUrl = product.image_url;
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —ç—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ Unsplash –∏–ª–∏ —Å—Ç–∞—Ä—ã–µ placeholder, –æ—Å—Ç–∞–≤–ª—è–µ–º null
      if (!product.image_url || product.image_url === '' || product.image_url.includes('/images/products/') || product.image_url.includes('unsplash.com')) {
        processedImageUrl = null;
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å mobile_image_url, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ fallback
      if (!processedImageUrl && product.mobile_image_url && product.mobile_image_url !== '' && !product.mobile_image_url.includes('unsplash.com')) {
        if (product.mobile_image_url.startsWith('/uploads/')) {
          processedImageUrl = `https://147.45.141.113:3001${product.mobile_image_url}`;
        } else if (product.mobile_image_url.startsWith('data:image/')) {
          processedImageUrl = product.mobile_image_url;
        } else if (product.mobile_image_url.startsWith('http://') || product.mobile_image_url.startsWith('https://')) {
          processedImageUrl = product.mobile_image_url;
        }
      }
      
      return {
        ...product,
        image_url: processedImageUrl,
        original_image_url: product.image_url,
        isAvailable: product.is_available === 1, // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ boolean –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        isPopular: product.is_popular === 1 // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ boolean –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
      };
    });
    
    res.json(productsWithPlaceholders);
  });
});



// API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.delete('/api/admin/clear-all-products', authenticateToken, requireAdmin, (req, res) => {
  db.run('DELETE FROM products', (err) => {
    if (err) {
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤' });
    }
    
    res.json({ message: '–í—Å–µ —Ç–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã' });
  });
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
app.post('/api/admin/products', authenticateToken, requireAdmin, (req, res) => {
  const { name, description, price, category, isPopular, isAvailable, is_available, image_url, mobile_image_url } = req.body;
  
  
  
  if (!name || !price) {
    return res.status(400).json({ message: '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (base64 –∏–ª–∏ URL)
  const imageUrl = image_url || '';
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  const isAvailableValue = isAvailable !== undefined ? isAvailable : is_available !== undefined ? is_available : true;
  const isPopularValue = isPopular !== undefined ? isPopular : false;

  db.run(`
    INSERT INTO products (name, description, price, image_url, mobile_image_url, category, is_popular, is_available)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
  `, [name, description, price, imageUrl, mobile_image_url || '', category, isPopularValue ? 1 : 0, isAvailableValue ? 1 : 0], function(err) {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', err);
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞' });
    }
    

    
    res.json({
      message: '–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
      productId: this.lastID,
      imageUrl
    });
  });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
app.put('/api/admin/products/:id', authenticateToken, requireAdmin, (req, res) => {
  const { id } = req.params;
  const { name, description, price, category, isPopular, isAvailable, is_available, image_url, mobile_image_url } = req.body;
  
  console.log('üîÑ UPDATE PRODUCT:', { id, name, description, price, category, mobile_image_url, image_url });
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  if (!name || !description || !price || !category) {
    console.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞:', { name, description, price, category });
    return res.status(400).json({ message: '–ù–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ü–µ–Ω–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä
  db.get('SELECT id FROM products WHERE id = ?', [id], (err, row) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', err);
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–∞' });
    }
    
    if (!row) {
      console.error('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', id);
      return res.status(404).json({ message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (base64 –∏–ª–∏ URL)
    const imageUrl = image_url || '';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    const isAvailableValue = isAvailable !== undefined ? isAvailable : is_available !== undefined ? is_available : true;
    const isPopularValue = isPopular !== undefined ? isPopular : false;

    console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å –¥–∞–Ω–Ω—ã–º–∏:', {
      name, description, price, category, imageUrl, 
      mobile_image_url: mobile_image_url || '',
      isAvailable: isAvailableValue,
      isPopular: isPopularValue
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
    db.run(`
      UPDATE products 
      SET name = ?, description = ?, price = ?, image_url = ?, mobile_image_url = ?, category = ?, is_popular = ?, is_available = ?
      WHERE id = ?
    `, [name, description, price, imageUrl, mobile_image_url || '', category, isPopularValue ? 1 : 0, isAvailableValue ? 1 : 0, id], function(err) {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', err);
        return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' });
      }
      
      console.log('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω, affected rows:', this.changes);
      
      res.json({
        success: true,
        message: '–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        imageUrl,
        productId: id
      });
    });
  });
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
app.delete('/api/admin/products/:id', authenticateToken, requireAdmin, (req, res) => {
  const { id } = req.params;
  
  db.run('DELETE FROM products WHERE id = ?', [id], function(err) {
    if (err) {
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞' });
    }
    
    res.json({ message: '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ' });
  });
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
app.post('/api/admin/upload-image', upload.single('image'), authenticateToken, requireAdmin, (req, res) => {
  try {
    console.log('üñºÔ∏è ADMIN UPLOAD: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
    console.log('üñºÔ∏è ADMIN UPLOAD: File:', req.file ? req.file.filename : '–ù–µ—Ç —Ñ–∞–π–ª–∞');
    
    if (!req.file) {
      console.log('‚ùå ADMIN UPLOAD: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
      return res.status(400).json({ 
        success: false,
        message: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ" 
      });
    }

    const imageUrl = `/uploads/${req.file.filename}`;
    console.log(`‚úÖ ADMIN UPLOAD: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${imageUrl}`);
    
    res.json({ 
      success: true,
      message: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", 
      imageUrl: imageUrl,
      url: imageUrl,  // –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ
      path: imageUrl, // –µ—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
      filename: req.file.filename
    });
  } catch (error) {
    console.error("‚ùå ADMIN UPLOAD: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error);
    res.status(500).json({ 
      success: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" 
    });
  }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ (base64)
app.post('/api/upload-payment-proof', (req, res) => {
  try {
    console.log('üí∞ PAYMENT PROOF: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ');
    
    const { imageBase64, orderId } = req.body;
    
    if (!imageBase64 || !orderId) {
      console.log('‚ùå PAYMENT PROOF: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return res.status(400).json({ 
        success: false,
        message: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: imageBase64, orderId" 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π base64
    if (!imageBase64.startsWith('data:image/')) {
      console.log('‚ùå PAYMENT PROOF: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç base64');
      return res.status(400).json({ 
        success: false,
        message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" 
      });
    }

    console.log(`üí∞ PAYMENT PROOF: –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ ${orderId} —Å —á–µ–∫–æ–º –æ–± –æ–ø–ª–∞—Ç–µ`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.run(`
      UPDATE orders 
      SET payment_proof = ?, payment_proof_date = CURRENT_TIMESTAMP 
      WHERE id = ?
    `, [imageBase64, orderId], function(err) {
      if (err) {
        console.error("‚ùå PAYMENT PROOF: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", err);
        return res.status(500).json({ 
          success: false,
          message: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ" 
        });
      }
      
      if (this.changes === 0) {
        console.log(`‚ùå PAYMENT PROOF: –ó–∞–∫–∞–∑ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return res.status(404).json({ 
          success: false,
          message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" 
        });
      }
      
      console.log(`‚úÖ PAYMENT PROOF: –ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}`);
      
      res.json({ 
        success: true,
        message: "–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω",
        orderId: orderId,
        paymentProofDate: new Date().toISOString()
      });
    });
    
  } catch (error) {
    console.error("‚ùå PAYMENT PROOF: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞:", error);
    res.status(500).json({ 
      success: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ" 
    });
  }
});

// API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/cart', authenticateToken, (req: any, res) => {
  const userId = req.user.id;
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  db.all(`
    SELECT c.*, p.name, p.price, p.image_url, p.description
    FROM cart c
    JOIN products p ON c.product_id = p.id
    WHERE c.user_id = ?
    ORDER BY c.created_at DESC
  `, [userId], (err, cartItems) => {
    if (err) {
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã' });
    }
    res.json(cartItems);
  });
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
app.post('/api/cart/add', authenticateToken, (req: any, res) => {
  const userId = req.user.id;
  const { productId, quantity = 1 } = req.body;
  
  if (!productId) {
    return res.status(400).json({ message: 'ID —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
  db.get('SELECT * FROM cart WHERE user_id = ? AND product_id = ?', [userId, productId], (err, existingItem) => {
    if (err) {
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã' });
    }
    
          if (existingItem) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        const newQuantity = (existingItem as any).quantity + quantity;
        db.run('UPDATE cart SET quantity = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?', [newQuantity, (existingItem as any).id], function(err) {
        if (err) {
          return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã' });
        }
        res.json({ message: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', quantity: newQuantity });
      });
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
      db.run('INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)', [userId, productId, quantity], function(err) {
        if (err) {
          return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É' });
        }
        res.json({ message: '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É', cartItemId: this.lastID });
      });
    }
  });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
app.put('/api/cart/:id', authenticateToken, (req: any, res) => {
  const { id } = req.params;
  const { quantity } = req.body;
  const userId = req.user.id;
  
  if (quantity <= 0) {
    return res.status(400).json({ message: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0' });
  }
  
  db.run('UPDATE cart SET quantity = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ? AND user_id = ?', [quantity, id, userId], function(err) {
    if (err) {
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã' });
    }
    
    if (this.changes === 0) {
      return res.status(404).json({ message: '–¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json({ message: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', quantity });
  });
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
app.delete('/api/cart/:id', authenticateToken, (req: any, res) => {
  const { id } = req.params;
  const userId = req.user.id;
  
  db.run('DELETE FROM cart WHERE id = ? AND user_id = ?', [id, userId], function(err) {
    if (err) {
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã' });
    }
    
    if (this.changes === 0) {
      return res.status(404).json({ message: '–¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json({ message: '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã' });
  });
});

// –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.delete('/api/cart', authenticateToken, (req: any, res) => {
  const userId = req.user.id;
  
  db.run('DELETE FROM cart WHERE user_id = ?', [userId], function(err) {
    if (err) {
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã' });
    }
    
    res.json({ message: '–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞' });
  });
});

// API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.get('/api/admin/users', authenticateToken, requireAdmin, (req: any, res) => {
  db.all('SELECT id, name, email, phone, address, is_admin, created_at FROM users ORDER BY created_at DESC', (err, users) => {
    if (err) {
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
    }
    
    const formattedUsers = users.map((user: any) => ({
      id: user.id,
      name: user.name,
      email: user.email,
      phone: user.phone,
      address: user.address,
      isAdmin: user.is_admin === 1,
      createdAt: user.created_at
    }));
    
    res.json(formattedUsers);
  });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.put('/api/admin/users/:id/admin', authenticateToken, requireAdmin, (req: any, res) => {
  const { id } = req.params;
  const { isAdmin } = req.body;
  
  if (typeof isAdmin !== 'boolean') {
    return res.status(400).json({ message: '–ü–æ–ª–µ isAdmin –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å boolean' });
  }
  
  db.run('UPDATE users SET is_admin = ? WHERE id = ?', [isAdmin ? 1 : 0, id], function(err) {
    if (err) {
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }
    
    if (this.changes === 0) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json({ 
      message: isAdmin ? 'Admin rights granted successfully' : 'Admin rights revoked successfully',
      isAdmin 
    });
  });
});

// API –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.post('/api/auth/register', async (req, res) => {
  try {
    const { name, email, phone, password, address } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!name || !email || !phone || !password) {
      return res.status(400).json({ 
        success: false, 
        message: '–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    db.get('SELECT id FROM users WHERE email = ?', [email], (err, existingUser) => {
      if (err) {
        return res.status(500).json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
        });
      }

      if (existingUser) {
        return res.status(400).json({ 
          success: false, 
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' 
        });
      }

      // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
      const hashedPassword = bcrypt.hashSync(password, 10);

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      db.run(
        'INSERT INTO users (name, email, phone, password, address, role, is_admin) VALUES (?, ?, ?, ?, ?, ?, ?)',
        [name, email, phone, hashedPassword, address || '', 'user', 0],
        function(err) {
          if (err) {
            return res.status(500).json({ 
              success: false, 
              message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
            });
          }

          // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          db.get('SELECT id, name, email, phone, address, is_admin FROM users WHERE id = ?', [this.lastID], (err, user: any) => {
            if (err || !user) {
              return res.status(500).json({ 
                success: false, 
                message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
              });
            }

            // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
            const token = jwt.sign(
              { id: user.id, email: user.email },
              JWT_SECRET,
              { expiresIn: '7d' }
            );

            res.json({
              access_token: token,
              user: {
                id: user.id,
                name: user.name,
                email: user.email,
                phone: user.phone,
                address: user.address,
                isAdmin: user.is_admin === 1
              }
            });
          });
        }
      );
    });
  } catch (error) {
    res.status(500).json({ 
      success: false, 
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

// API –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.post('/api/auth/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!email || !password) {
      return res.status(400).json({ 
        success: false, 
        message: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      });
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    db.get('SELECT id, name, email, phone, address, password, is_admin FROM users WHERE email = ?', [email], (err, user: any) => {
      if (err) {
        return res.status(500).json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
        });
      }

      if (!user) {
        return res.status(401).json({ 
          success: false, 
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
      const isValidPassword = bcrypt.compareSync(password, user.password);
      
      if (!isValidPassword) {
        return res.status(401).json({ 
          success: false, 
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
        });
      }

      // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
      const token = jwt.sign(
        { id: user.id, email: user.email },
        JWT_SECRET,
        { expiresIn: '7d' }
      );

      const responseData = {
        access_token: token,
        user: {
          id: user.id,
          name: user.name,
          email: user.email,
          phone: user.phone,
          address: user.address,
          isAdmin: user.is_admin === 1
        }
      };
      
      res.json(responseData);
    });
  } catch (error) {
    res.status(500).json({ 
      success: false, 
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

// API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.put('/api/users/profile', authenticateToken, (req: any, res) => {
  try {
    const userId = req.user.id;
    const { name, phone, address } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!name || !phone) {
      return res.status(400).json({ 
        success: false, 
        message: '–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.run(
      'UPDATE users SET name = ?, phone = ?, address = ? WHERE id = ?',
      [name, phone, address || '', userId],
      function(err) {
        if (err) {
          return res.status(500).json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è' 
          });
        }

        if (this.changes === 0) {
          return res.status(404).json({ 
            success: false, 
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
          });
        }

        res.json({
          success: true,
          message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
        });
      }
    );
  } catch (error) {
    res.status(500).json({ 
      success: false, 
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/orders/user', authenticateToken, (req: any, res) => {
  try {
    const userId = req.user.id;
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.all(`
      SELECT 
        o.id,
        o.order_number,
        o.customer_name,
        o.customer_phone,
        o.customer_address,
        o.total_amount,
        o.status,
        o.payment_method,
        o.payment_proof,
        o.payment_proof_date,
        o.created_at
      FROM orders o
      WHERE o.user_id = ?
      ORDER BY o.created_at DESC
    `, [userId], (err, orders) => {
      if (err) {
        return res.status(500).json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤',
          error: err instanceof Error ? err.message : 'Database error'
        });
      }

      // –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      if (!orders || orders.length === 0) {
        return res.json([]);
      }

      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
      const ordersWithItems = orders.map((order: any) => ({
        id: order.id,
        orderNumber: order.order_number,
        customerName: order.customer_name,
        customerPhone: order.customer_phone,
        deliveryAddress: order.customer_address,
        totalAmount: order.total_amount,
        status: order.status,
        paymentMethod: order.payment_method,
        paymentProof: order.payment_proof,
        paymentProofDate: order.payment_proof_date,
        createdAt: order.created_at,
        items: [] // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
      }));

      res.json(ordersWithItems);
    });
  } catch (error) {
    res.status(500).json({ 
      success: false, 
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});



// –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.get('/api/bank-settings', (req, res) => {
  db.get('SELECT * FROM bank_settings ORDER BY id DESC LIMIT 1', (err, settings: any) => {
    if (err) {
      return res.status(500).json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
      });
    }
    
    if (!settings) {
      return res.json({
        bank_name: 'MBank',
        bank_link: 'https://app.mbank.kg/qr#00020101021132500012c2c.mbank.kg01020210129965000867861202111302115204999953034175405100005908YBRAI%20S.63048fa2',
        mbank_hash: '00020101021132500012c2c.mbank.kg01020210129965000867861202111302115204999953034175405100005908YBRAI%20S.63048fa2'
      });
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º hash –∏–∑ —Å—Å—ã–ª–∫–∏ (–≤—Å–µ —á—Ç–æ –ø–æ—Å–ª–µ #)
    const mbank_hash = settings.bank_link.split('#')[1] || '';
    
    res.json({
      bank_name: settings.bank_name,
      bank_link: settings.bank_link,
      mbank_hash: mbank_hash
    });
  });
});

app.post('/api/bank-settings', (req, res) => {
  const { bank_name, bank_link } = req.body;
  
  if (!bank_name || !bank_link) {
    return res.status(400).json({
      success: false,
      message: '–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –∏ —Å—Å—ã–ª–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
    });
  }
  
  db.run(`
    INSERT INTO bank_settings (bank_name, bank_link, updated_at) 
    VALUES (?, ?, CURRENT_TIMESTAMP)
  `, [bank_name, bank_link], function(err) {
    if (err) {
      return res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'
      });
    }
    
    res.json({
      success: true,
      message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
      id: this.lastID
    });
  });
});



// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è Vercel
export default app;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTTPS —Å–µ—Ä–≤–µ—Ä–∞
const createHttpsServer = () => {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ –ø–∞–ø–∫–µ certs
    let certPath = path.join(__dirname, '../certs/certificate.pem');
    let keyPath = path.join(__dirname, '../certs/private-key.pem');
    
    // –ï—Å–ª–∏ –≤ –ø–∞–ø–∫–µ certs –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    if (!fs.existsSync(certPath) || !fs.existsSync(keyPath)) {
      certPath = '/etc/letsencrypt/live/mnogo-rolly.online/fullchain.pem';
      keyPath = '/etc/letsencrypt/live/mnogo-rolly.online/privkey.pem';
    }
    
    if (fs.existsSync(certPath) && fs.existsSync(keyPath)) {
      const options = {
        cert: fs.readFileSync(certPath),
        key: fs.readFileSync(keyPath)
      };
      
      return https.createServer(options, app);
    } else {
      console.log('‚ö†Ô∏è  SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä.');
      return null;
    }
  } catch (error) {
    console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:', (error as Error).message);
    console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä.');
    return null;
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const PORT = process.env.PORT || 3000; // –ü–æ—Ä—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const NODE_ENV = process.env.NODE_ENV || 'development';
const USE_HTTPS = process.env.USE_HTTPS === 'true'; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTPS

// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
console.log('üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log('  PORT:', process.env.PORT);
console.log('  NODE_ENV:', process.env.NODE_ENV);
console.log('  USE_HTTPS:', process.env.USE_HTTPS);
console.log('  –ò—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:');
console.log('    PORT:', PORT);
console.log('    NODE_ENV:', NODE_ENV);
console.log('    USE_HTTPS:', USE_HTTPS);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
const httpsServer = createHttpsServer();

if (httpsServer && (NODE_ENV === 'production' || USE_HTTPS)) {
  // –ï—Å–ª–∏ –µ—Å—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ HTTPS
  const port = NODE_ENV === 'production' ? 3001 : PORT;
  httpsServer.listen(Number(port), '0.0.0.0', () => {
    console.log('üîí HTTPS Server started on port:', port);
    console.log('üåê URL: https://127.0.0.1:' + port);
    console.log('üåê –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å: https://[YOUR_IP]:' + port);
    if (NODE_ENV === 'production') {
      console.log('üåê nginx –±—É–¥–µ—Ç –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ—Ç –ø–æ—Ä—Ç');
    }
    console.log('üîß –†–µ–∂–∏–º:', NODE_ENV);
  });
} else {
  // –ï—Å–ª–∏ –Ω–µ—Ç SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏–ª–∏ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –∑–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
  app.listen(Number(PORT), '0.0.0.0', () => {
    console.log('üöÄ HTTP Server started on port:', PORT);
    console.log('üåê URL: http://127.0.0.1:' + PORT);
    console.log('üåê –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: http://localhost:' + PORT);
    console.log('üîß –†–µ–∂–∏–º:', NODE_ENV);
  });
}



// Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
app.get('/api/check-image/:filename(*)', (req, res) => {
  const filename = req.params.filename;
  const filePath = path.join(__dirname, '../uploads', filename);
  
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', filename);
  console.log('üìÅ –ü–æ–ª–Ω—ã–π –ø—É—Ç—å:', filePath);
  
  if (!fs.existsSync(filePath)) {
    console.log('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return res.status(404).json({ 
      error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω',
      filename,
      fullPath: filePath
    });
  }
  
  const stats = fs.statSync(filePath);
  const ext = path.extname(filePath).toLowerCase();
  
  console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:', {
    size: stats.size,
    extension: ext,
    created: stats.birthtime,
    modified: stats.mtime
  });
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
  let mimeType = 'application/octet-stream';
  switch (ext) {
    case '.jpg':
    case '.jpeg':
      mimeType = 'image/jpeg';
      break;
    case '.png':
      mimeType = 'image/png';
      break;
    case '.gif':
      mimeType = 'image/gif';
      break;
    case '.webp':
      mimeType = 'image/webp';
      break;
    case '.svg':
      mimeType = 'image/svg+xml';
      break;
  }
  
  res.json({
    exists: true,
    filename,
    fullPath: filePath,
    size: stats.size,
    mimeType,
    extension: ext,
    created: stats.birthtime,
    modified: stats.mtime,
                     url: `https://147.45.141.113:3001/uploads/${filename}`
  });
});

// Endpoint –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ)
app.post('/api/upload-base64', (req, res) => {
  try {
    const { image, filename } = req.body;
    
    if (!image || !filename) {
      return res.status(400).json({ success: false, message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞' });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º base64 –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –µ—Å—Ç—å
    const imageUrl = image; // base64 —Å—Ç—Ä–æ–∫–∞
    
                 console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', filename);
    
    res.json({
      success: true,
      imageUrl: imageUrl,
      message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ base64:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞' });
  }
});

// ==================== –ü–†–û–°–¢–û–ô API –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ú–ï–ù–ê–ú–ò ====================

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É
app.get('/api/admin/shifts/current', authenticateToken, requireAdmin, (req, res) => {
  console.log('üîç API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã');
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ shifts
  db.get("SELECT name FROM sqlite_master WHERE type='table' AND name='shifts'", (err, tableExists) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã shifts:', err);
      return res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å–º–µ–Ω' });
    }
    
    if (!tableExists) {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ shifts –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null');
      return res.json({ success: true, shift: null });
    }
    
    // –¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É
    db.get(`
      SELECT s.*, COALESCE(u.username, u.name) as opened_by_name
      FROM shifts s
      LEFT JOIN users u ON s.opened_by = u.id
      WHERE s.status = 'open'
      ORDER BY s.opened_at DESC
      LIMIT 1
    `, (err, shift: any) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã:', err);
        return res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ–Ω—ã' });
      }
      
      if (!shift) {
        return res.json({ success: true, shift: null });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã
      db.all(`
        SELECT 
          COUNT(*) as total_orders,
          SUM(total_amount) as total_revenue,
          SUM(CASE WHEN payment_method = 'cash' THEN total_amount ELSE 0 END) as cash_revenue,
          SUM(CASE WHEN payment_method = 'card' THEN total_amount ELSE 0 END) as card_revenue
        FROM orders 
        WHERE created_at >= ? AND status != 'cancelled'
      `, [(shift as any).opened_at], (err, stats: any) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–º–µ–Ω—ã:', err);
          return res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
        }
        
        const statsData = (stats[0] as any) || { total_orders: 0, total_revenue: 0, cash_revenue: 0, card_revenue: 0 };
        
        res.json({
          success: true,
          shift: {
            ...(shift as any),
            ...statsData
          }
        });
      });
    });
  });
});

// –û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É
app.post('/api/admin/shifts/open', authenticateToken, requireAdmin, (req, res) => {
  console.log('üîç API: –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π —Å–º–µ–Ω—ã');
  
  const { notes } = req.body;
  const shiftNumber = `SHIFT-${Date.now()}`;
  const userId = (req as any).user.id;
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ shifts
  db.get("SELECT name FROM sqlite_master WHERE type='table' AND name='shifts'", (err, tableExists) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã shifts:', err);
      return res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å–º–µ–Ω' });
    }
    
    if (!tableExists) {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ shifts –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë...');
      
      // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É shifts
      const createShiftsTable = `
        CREATE TABLE IF NOT EXISTS shifts (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          shift_number TEXT UNIQUE NOT NULL,
          opened_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          closed_at DATETIME,
          opened_by INTEGER NOT NULL,
          closed_by INTEGER,
          total_orders INTEGER DEFAULT 0,
          total_revenue REAL DEFAULT 0,
          cash_revenue REAL DEFAULT 0,
          card_revenue REAL DEFAULT 0,
          status TEXT DEFAULT 'open' CHECK(status IN ('open', 'closed')),
          notes TEXT,
          FOREIGN KEY (opened_by) REFERENCES users(id),
          FOREIGN KEY (closed_by) REFERENCES users(id)
        )`;
      
      db.run(createShiftsTable, (err) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã shifts:', err);
          return res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å–º–µ–Ω' });
        }
        
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ shifts —Å–æ–∑–¥–∞–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã...');
        insertShift();
      });
    } else {
      insertShift();
    }
    
    function insertShift() {
      db.run(`
        INSERT INTO shifts (shift_number, opened_by, status, notes)
        VALUES (?, ?, 'open', ?)
      `, [shiftNumber, userId, notes || ''], function(err) {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã:', err);
          return res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã' });
        }
        
        console.log('‚úÖ –ù–æ–≤–∞—è —Å–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞ —Å ID:', this.lastID);
        
        res.json({
          success: true,
          shift: {
            id: this.lastID,
            shift_number: shiftNumber,
            opened_at: new Date().toISOString(),
            opened_by: userId,
            status: 'open',
            notes: notes || '',
            total_orders: 0,
            total_revenue: 0,
            cash_revenue: 0,
            card_revenue: 0
          }
        });
      });
    }
  });
});

// –ó–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É
app.post('/api/admin/shifts/close', authenticateToken, requireAdmin, (req, res) => {
  console.log('üîç API: –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã');
  
  const userId = (req as any).user.id;
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ shifts
  db.get("SELECT name FROM sqlite_master WHERE type='table' AND name='shifts'", (err, tableExists) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã shifts:', err);
      return res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å–º–µ–Ω' });
    }
    
    if (!tableExists) {
      return res.status(400).json({ success: false, message: '–¢–∞–±–ª–∏—Ü–∞ —Å–º–µ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ—Ç–∫—Ä—ã—Ç—É—é —Å–º–µ–Ω—É
    db.get('SELECT * FROM shifts WHERE status = "open" ORDER BY opened_at DESC LIMIT 1', (err, shift: any) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã:', err);
        return res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ–Ω—ã' });
      }
      
      if (!shift) {
        return res.status(400).json({ success: false, message: '–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–º–µ–Ω—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è' });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      db.all(`
        SELECT 
          COUNT(*) as total_orders,
          SUM(total_amount) as total_revenue,
          SUM(CASE WHEN payment_method = 'cash' THEN total_amount ELSE 0 END) as cash_revenue,
          SUM(CASE WHEN payment_method = 'card' THEN total_amount ELSE 0 END) as card_revenue
        FROM orders 
        WHERE created_at >= ? AND status != 'cancelled'
      `, [(shift as any).opened_at], (err, stats: any) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–º–µ–Ω—ã:', err);
          return res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
        }
        
        const statsData = (stats[0] as any) || { total_orders: 0, total_revenue: 0, cash_revenue: 0, card_revenue: 0 };
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–º–µ–Ω—É
        db.run(`
          UPDATE shifts 
          SET status = 'closed', closed_at = CURRENT_TIMESTAMP, closed_by = ?,
              total_orders = ?, total_revenue = ?, cash_revenue = ?, card_revenue = ?
          WHERE id = ?
        `, [userId, statsData.total_orders, statsData.total_revenue, statsData.cash_revenue, statsData.card_revenue, (shift as any).id], (err) => {
          if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã:', err);
            return res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã' });
          }
          
          console.log('‚úÖ –°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞:', shift.shift_number);
          
          res.json({
            success: true,
            message: '–°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞',
            shift: {
              ...shift,
              ...statsData,
              status: 'closed',
              closed_at: new Date().toISOString(),
              closed_by: userId
            }
          });
        });
      });
    });
  });
});

// ==================== –ö–û–ù–ï–¶ API –î–õ–Ø –°–ú–ï–ù ====================

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CDN (–µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç)
app.post('/api/upload-cdn', upload.single('image'), (req, res) => {
  if (!req.file) {
    return res.status(400).json({ success: false, message: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
  }

  try {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –≤–Ω–µ—à–Ω–∏–º CDN (Cloudinary, AWS S3, etc.)
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å, –Ω–æ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    const fileName = 'product-' + Date.now() + '-' + Math.round(Math.random() * 1E9) + path.extname(req.file.originalname);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
    const uploadsDir = path.join(__dirname, '../uploads');
    if (!fs.existsSync(uploadsDir)) {
      fs.mkdirSync(uploadsDir, { recursive: true });
    }
    
    const filePath = path.join(uploadsDir, fileName);
    fs.writeFileSync(filePath, req.file.buffer);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL —Å –∫—ç—à-–±–∞—Å—Ç–∏–Ω–≥–æ–º
    const imageUrl = `/uploads/${fileName}?v=${Date.now()}`;
    
    console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ CDN:', imageUrl);
    
    res.json({
      success: true,
      imageUrl: imageUrl,
      message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CDN:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞' });
  }
});

// –°–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤—ã—à–µ –≤ –∫–æ–¥–µ
console.log('‚úÖ Backend —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');

// API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–∞–º–∏
// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É
app.get('/api/shifts/current', authenticateToken, requireAdmin, (req: any, res) => {
  console.log('üïê SHIFTS: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã');
  
  db.get(`
    SELECT s.*, 
           u1.name as opened_by_name,
           u2.name as closed_by_name
    FROM shifts s
    LEFT JOIN users u1 ON s.opened_by = u1.id
    LEFT JOIN users u2 ON s.closed_by = u2.id
    WHERE s.status = 'open'
    ORDER BY s.opened_at DESC
    LIMIT 1
  `, (err, shift) => {
    if (err) {
      console.error('‚ùå SHIFTS: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã:', err);
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã' });
    }
    
    if (shift) {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–∫–∞–∑–∞–º –∑–∞ —Å–º–µ–Ω—É
      db.get(`
        SELECT 
          COUNT(*) as total_orders,
          COALESCE(SUM(total_amount), 0) as total_revenue,
          COALESCE(SUM(CASE WHEN payment_method = 'cash' THEN total_amount ELSE 0 END), 0) as cash_revenue,
          COALESCE(SUM(CASE WHEN payment_method = 'card' THEN total_amount ELSE 0 END), 0) as card_revenue
        FROM orders 
        WHERE created_at >= ? AND created_at <= COALESCE(?, datetime('now'))
      `, [(shift as any).opened_at, (shift as any).closed_at], (err, stats) => {
        if (err) {
          console.error('‚ùå SHIFTS: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–º–µ–Ω—ã:', err);
        }
        
        const shiftWithStats = {
          ...shift,
          total_orders: stats ? (stats as any).total_orders : 0,
          total_revenue: stats ? (stats as any).total_revenue : 0,
          cash_revenue: stats ? (stats as any).cash_revenue : 0,
          card_revenue: stats ? (stats as any).card_revenue : 0
        };
        
        console.log('‚úÖ SHIFTS: –¢–µ–∫—É—â–∞—è —Å–º–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞:', shiftWithStats);
        res.json(shiftWithStats);
      });
    } else {
      console.log('‚ÑπÔ∏è SHIFTS: –¢–µ–∫—É—â–∞—è —Å–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      res.json(null);
    }
  });
});

// –û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É
app.post('/api/shifts/open', authenticateToken, requireAdmin, (req: any, res) => {
  const { notes } = req.body;
  const userId = req.user.id;
  
  console.log('üïê SHIFTS: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã:', { userId, notes });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–º–µ–Ω–∞
  db.get('SELECT * FROM shifts WHERE status = "open"', (err, existingShift) => {
    if (err) {
      console.error('‚ùå SHIFTS: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–º–µ–Ω—ã:', err);
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–º–µ–Ω—ã' });
    }
    
    if (existingShift) {
      console.log('‚ùå SHIFTS: –°–º–µ–Ω–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞');
      return res.status(400).json({ message: '–°–º–µ–Ω–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞' });
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–º–µ–Ω—É
    const shiftNumber = `SHIFT-${Date.now()}`;
    const openedAt = new Date().toISOString();
    
    db.run(`
      INSERT INTO shifts (shift_number, opened_at, opened_by, status, notes)
      VALUES (?, ?, ?, 'open', ?)
    `, [shiftNumber, openedAt, userId, notes || ''], function(err) {
      if (err) {
        console.error('‚ùå SHIFTS: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω—ã:', err);
        return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω—ã' });
      }
      
      const newShift = {
        id: this.lastID,
        shift_number: shiftNumber,
        opened_at: openedAt,
        opened_by: userId,
        status: 'open',
        notes: notes || '',
        total_orders: 0,
        total_revenue: 0,
        cash_revenue: 0,
        card_revenue: 0
      };
      
      console.log('‚úÖ SHIFTS: –°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞:', newShift);
      res.json(newShift);
    });
  });
});

// –ó–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É
app.post('/api/shifts/close', authenticateToken, requireAdmin, (req: any, res) => {
  const userId = req.user.id;
  
  console.log('üïê SHIFTS: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã:', { userId });
  
  // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –æ—Ç–∫—Ä—ã—Ç—É—é —Å–º–µ–Ω—É
  db.get('SELECT * FROM shifts WHERE status = "open"', (err, currentShift) => {
    if (err) {
      console.error('‚ùå SHIFTS: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã:', err);
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã' });
    }
    
    if (!currentShift) {
      console.log('‚ùå SHIFTS: –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–º–µ–Ω—ã');
      return res.status(400).json({ message: '–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–º–µ–Ω—ã' });
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–º–µ–Ω—É
    const closedAt = new Date().toISOString();
    
    db.run(`
      UPDATE shifts 
      SET status = 'closed', closed_at = ?, closed_by = ?
      WHERE id = ?
    `, [closedAt, userId, (currentShift as any).id], function(err) {
      if (err) {
        console.error('‚ùå SHIFTS: –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã:', err);
        return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã' });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–∫–∞–∑–∞–º –∑–∞ —Å–º–µ–Ω—É
      db.get(`
        SELECT 
          COUNT(*) as total_orders,
          COALESCE(SUM(total_amount), 0) as total_revenue,
          COALESCE(SUM(CASE WHEN payment_method = 'cash' THEN total_amount ELSE 0 END), 0) as cash_revenue,
          COALESCE(SUM(CASE WHEN payment_method = 'card' THEN total_amount ELSE 0 END), 0) as card_revenue
        FROM orders 
        WHERE created_at >= ? AND created_at <= ?
      `, [(currentShift as any).opened_at, closedAt], (err, stats) => {
        if (err) {
          console.error('‚ùå SHIFTS: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–º–µ–Ω—ã:', err);
        }
        
        const closedShift = {
          ...currentShift,
          status: 'closed',
          closed_at: closedAt,
          closed_by: userId,
          total_orders: stats ? (stats as any).total_orders : 0,
          total_revenue: stats ? (stats as any).total_revenue : 0,
          cash_revenue: stats ? (stats as any).cash_revenue : 0,
          card_revenue: stats ? (stats as any).card_revenue : 0
        };
        
        console.log('‚úÖ SHIFTS: –°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞:', closedShift);
        res.json({
          success: true,
          message: '–°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ',
          shift: closedShift
        });
      });
    });
  });
});

// Telegram webhook endpoint
app.post('/telegram-webhook', express.raw({ type: 'application/json' }), async (req: any, res) => {
  try {
    const update = req.body;
    console.log('ü§ñ TELEGRAM: –ü–æ–ª—É—á–µ–Ω webhook:', update);
    
    if (update.message) {
      const { message } = update;
      const chatId = message.chat.id;
      const user = message.from;
      const text = message.text;
      
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await registerTelegramUser(
        user.id,
        user.username || '',
        user.first_name || '',
        user.last_name || ''
      );
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
      if (text === '/start') {
        const welcomeMessage = `
üçï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–∫–∞–∑–æ–≤ "–ú–Ω–æ–≥–æ –ü–µ–Ω–∏—Å–∞"!

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/orders - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã
/order <–Ω–æ–º–µ—Ä> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
/help - –ü–æ–º–æ—â—å

üí° –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /order <–Ω–æ–º–µ—Ä>
        `;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        const { bot } = require('../src/telegramBot');
        if (bot) {
          bot.sendMessage(chatId, welcomeMessage);
        }
      } else if (text === '/orders') {
        try {
          const orders = await getUserOrders(user.id);
          
          if (orders.length === 0) {
            const { bot } = require('../src/telegramBot');
            if (bot) {
              bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤. –°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Å–∞–π—Ç–µ! üõí');
            }
          } else {
            let message = 'üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n\n';
            orders.forEach(order => {
              const status = getStatusEmoji(order.status);
              const date = new Date(order.created_at).toLocaleDateString('ru-RU');
              message += `${status} –ó–∞–∫–∞–∑ #${order.id}\n`;
              message += `üí∞ –°—É–º–º–∞: ${order.total_amount} ‚ÇΩ\n`;
              message += `üìÖ –î–∞—Ç–∞: ${date}\n`;
              message += `üìç –ê–¥—Ä–µ—Å: ${order.delivery_address || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
              message += `üìä –°—Ç–∞—Ç—É—Å: ${getStatusText(order.status)}\n\n`;
            });
            
            message += 'üí° –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /order <–Ω–æ–º–µ—Ä>';
            
            const { bot } = require('../src/telegramBot');
            if (bot) {
              bot.sendMessage(chatId, message);
            }
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
          const { bot } = require('../src/telegramBot');
          if (bot) {
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.');
          }
        }
      } else if (text === '/help') {
        const helpMessage = `
üîß –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/orders - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã
/order <–Ω–æ–º–µ—Ä> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
‚Ä¢ /order 123 - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑ ‚Ññ123
‚Ä¢ /orders - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤

üåê –°–∞–π—Ç: https://your-domain.com
        `;
        
        const { bot } = require('../src/telegramBot');
        if (bot) {
          bot.sendMessage(chatId, helpMessage);
        }
      } else if (text && /^\d+$/.test(text)) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
                 try {
           const orderId = parseInt(text);
           const order = await getUserOrder(user.id, orderId.toString());
          
          if (!order) {
            const { bot } = require('../src/telegramBot');
            if (bot) {
              bot.sendMessage(chatId, '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.');
            }
          } else {
            const status = getStatusEmoji(order.status);
            const date = new Date(order.created_at).toLocaleDateString('ru-RU');
            const time = new Date(order.created_at).toLocaleTimeString('ru-RU');
            
            let message = `${status} –ó–∞–∫–∞–∑ #${order.id}\n\n`;
            message += `üìÖ –î–∞—Ç–∞: ${date} –≤ ${time}\n`;
            message += `üí∞ –°—É–º–º–∞: ${order.total_amount} ‚ÇΩ\n`;
            message += `üìç –ê–¥—Ä–µ—Å: ${order.delivery_address || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
            message += `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
            message += `üìä –°—Ç–∞—Ç—É—Å: ${getStatusText(order.status)}\n\n`;
            
            if (order.items) {
              message += `üõí –¢–æ–≤–∞—Ä—ã:\n${order.items}\n\n`;
            }
            
            message += `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}`;
            
            const { bot } = require('../src/telegramBot');
            if (bot) {
              bot.sendMessage(chatId, message);
            }
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
          const { bot } = require('../src/telegramBot');
          if (bot) {
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          }
        }
      } else if (text && !text.startsWith('/')) {
        const { bot } = require('../src/telegramBot');
        if (bot) {
          bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.');
        }
      }
    }
    
    res.status(200).json({ ok: true });
  } catch (error) {
    console.error('‚ùå TELEGRAM: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Telegram
function getStatusEmoji(status: string): string {
  const statusMap: { [key: string]: string } = {
    'pending': '‚è≥',
    'confirmed': '‚úÖ',
    'preparing': 'üë®‚Äçüç≥',
    'ready': 'üöö',
    'delivered': 'üéâ',
    'cancelled': '‚ùå'
  };
  return statusMap[status] || '‚ùì';
}

function getStatusText(status: string): string {
  const statusMap: { [key: string]: string } = {
    'pending': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
    'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
    'preparing': '–ì–æ—Ç–æ–≤–∏—Ç—Å—è',
    'ready': '–ì–æ—Ç–æ–≤ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ',
    'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
    'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
  };
  return statusMap[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–º–µ–Ω
app.get('/api/shifts/history', authenticateToken, requireAdmin, (req: any, res) => {
  console.log('üïê SHIFTS: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–º–µ–Ω');
  
  db.all(`
    SELECT s.*, 
           u1.name as opened_by_name,
           u2.name as closed_by_name
    FROM shifts s
    LEFT JOIN users u1 ON s.opened_by = u1.id
    LEFT JOIN users u2 ON s.closed_by = u1.id
    ORDER BY s.opened_at DESC
    LIMIT 50
  `, (err, shifts) => {
    if (err) {
      console.error('‚ùå SHIFTS: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–º–µ–Ω:', err);
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–º–µ–Ω' });
    }
    
    console.log('‚úÖ SHIFTS: –ò—Å—Ç–æ—Ä–∏—è —Å–º–µ–Ω –ø–æ–ª—É—á–µ–Ω–∞:', shifts.length);
    res.json(shifts);
  });
});
