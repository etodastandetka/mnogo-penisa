import { apiClient } from './client';

export interface CreateOrderRequest {
  items: Array<{
    product: {
      id: string | number;
      price: number;
    };
    quantity: number;
  }>;
  customer: {
    name: string;
    phone: string;
    address: string;
    notes?: string;
  };
  total: number;
  paymentMethod: string;
  notes?: string;
}

export interface CreateOrderResponse {
  orderId: number;
  orderNumber: string;
}

export const createOrder = async (orderData: CreateOrderRequest): Promise<CreateOrderResponse> => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω
    const token = localStorage.getItem('token');
    const endpoint = token ? '/orders' : '/orders/guest';
    
    console.log('üì¶ –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ endpoint:', endpoint);
    
    const response = await apiClient.post(endpoint, orderData);
    
    // –ë—ç–∫–µ–Ω–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { success: true, data: { orderId, orderNumber } }
    if (response.data.success && response.data.data) {
      return response.data.data;
    }
    
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    throw new Error(error.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
  }
};

export const getUserOrders = async () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω
    const token = localStorage.getItem('token');
    if (!token) {
      console.log('‚ö†Ô∏è –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–∫–∞–∑–æ–≤');
      return [];
    }
    
    const response = await apiClient.get('/orders/user');
    return response.data || [];
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 401 (–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    if (error.response?.status === 401) {
      return [];
    }
    throw new Error(error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤');
  }
};

export const getOrderById = async (orderId: string | number) => {
  try {
    const response = await apiClient.get(`/orders/${orderId}`);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    throw new Error(error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
  }
};

export const getGuestOrderByNumber = async (orderNumber: string) => {
  try {
    const response = await apiClient.get(`/orders/guest/${orderNumber}`);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞:', error);
    throw new Error(error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
  }
};

