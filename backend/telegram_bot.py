#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import telebot
import requests
import os
import json
from datetime import datetime
import threading
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ (–∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–æ)
BOT_TOKEN = '8336008623:AAHWO3vRgVceBeJvjMVaPBdZMkNTBB-MHCc'
ADMIN_GROUP_ID = -1002728692510
WEBHOOK_URL = 'https://mnogo-rolly.online/telegram-webhook'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = 'https://mnogo-rolly.online/api'
LOCAL_API_URL = 'http://127.0.0.1:3000/api'

# –¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞ (–ø–æ–ª—É—á–∏—Ç–µ —á–µ—Ä–µ–∑ get-admin-token.py)
ADMIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjY3LCJlbWFpbCI6ImFkbWluQG1ub2dvLXJvbGx5LnJ1IiwiaWF0IjoxNzU2NTQ5NDc1LCJleHAiOjE3NTcxNTQyNzV9.6-bsKgZNwFFqzJAVIpNSmGtMt2hSpf2tx2TFejmcfXQ'

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...")
    
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API
        response = requests.get(f"{API_BASE_URL}/products", timeout=5)
        if response.status_code == 200:
            print(f"‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω: {API_BASE_URL}")
            return True
        else:
            print(f"‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

def get_status_emoji(status):
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    status_map = {
        'pending': '‚è≥',
        'confirmed': '‚úÖ',
        'preparing': 'üë®‚Äçüç≥',
        'ready': 'üöö',
        'delivered': 'üéâ',
        'cancelled': '‚ùå'
    }
    return status_map.get(status, '‚ùì')

def get_status_text(status):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞"""
    status_map = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        'preparing': '–ì–æ—Ç–æ–≤–∏—Ç—Å—è',
        'ready': '–ì–æ—Ç–æ–≤ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ',
        'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    }
    return status_map.get(status, status)

@bot.message_handler(commands=['start'])
def start_command(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    chat_id = message.chat.id
    user = message.from_user
    
    welcome_message = f"""
üçï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–∫–∞–∑–æ–≤ "–ú–Ω–æ–≥–æ –ü–µ–Ω–∏—Å–∞"!

üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/order <–Ω–æ–º–µ—Ä> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
/help - –ü–æ–º–æ—â—å

üí° –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /order <–Ω–æ–º–µ—Ä>
    """
    
    bot.send_message(chat_id, welcome_message.strip())
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")



@bot.message_handler(commands=['order'])
def order_detail_command(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /order <–Ω–æ–º–µ—Ä>"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    command_parts = message.text.split()
    if len(command_parts) != 2:
        bot.send_message(chat_id, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /order <–Ω–æ–º–µ—Ä>\n–ü—Ä–∏–º–µ—Ä: /order 123')
        return
    
    try:
        order_id = int(command_parts[1])
    except ValueError:
        bot.send_message(chat_id, '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API —Å —Ç–æ–∫–µ–Ω–æ–º –∞–¥–º–∏–Ω–∞
        headers = {
            'Authorization': f'Bearer {ADMIN_TOKEN}',
            'Content-Type': 'application/json'
        }
        
        print(f"üîç –ó–∞–ø—Ä–æ—Å –∫ API: {API_BASE_URL}/admin/orders/{order_id}")
        response = requests.get(f"{API_BASE_URL}/admin/orders/{order_id}", headers=headers, timeout=10)
        
        print(f"üì° –û—Ç–≤–µ—Ç API: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        print(f"üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text[:200]}...")
        
        if response.status_code == 200:
            order = response.json()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
            status_emoji = get_status_emoji(order.get('status', 'pending'))
            status_text = get_status_text(order.get('status', 'pending'))
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            try:
                created_at = order.get('created_at', '')
                date = datetime.fromisoformat(created_at.replace('Z', '+00:00')).strftime('%d.%m.%Y %H:%M')
            except:
                date = '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
            
            message_text = f"{status_emoji} –ó–∞–∫–∞–∑ #{order.get('id', 'N/A')}\n\n"
            message_text += f"üìÖ –î–∞—Ç–∞: {date}\n"
            message_text += f"üí∞ –°—É–º–º–∞: {order.get('total_amount', 0)} ‚ÇΩ\n"
            message_text += f"üìç –ê–¥—Ä–µ—Å: {order.get('delivery_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            message_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order.get('customer_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            message_text += f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            items = order.get('items', [])
            if items:
                message_text += "üõí –¢–æ–≤–∞—Ä—ã:\n"
                for item in items:
                    if isinstance(item, dict):
                        message_text += f"‚Ä¢ {item.get('quantity', 1)}x {item.get('name', '–¢–æ–≤–∞—Ä')} - {item.get('price', 0)} ‚ÇΩ\n"
                    else:
                        message_text += f"‚Ä¢ {item}\n"
                message_text += "\n"
            
            message_text += f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.get('notes', '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')}"
            
            bot.send_message(chat_id, message_text)
            
        elif response.status_code == 404:
            bot.send_message(chat_id, '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        else:
            bot.send_message(chat_id, f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (—Å—Ç–∞—Ç—É—Å: {response.status_code})')
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        bot.send_message(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        bot.send_message(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.')

@bot.message_handler(commands=['help'])
def help_command(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    chat_id = message.chat.id
    
    help_text = """
üîß –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/order <–Ω–æ–º–µ—Ä> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/test - –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É

üí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
‚Ä¢ /order 123 - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑ ‚Ññ123
‚Ä¢ /test - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

üåê –°–∞–π—Ç: https://mnogo-rolly.online
üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @admin_username
    """
    
    bot.send_message(chat_id, help_text.strip())

@bot.message_handler(commands=['test'])
def test_command(message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    chat_id = message.chat.id
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∑–∞–∫–∞–∑–µ)
    test_order = {
        'order_number': 'MR-1755448995603-999',
        'customer_name': '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
        'customer_phone': '+996700123456',
        'delivery_address': '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å, –ë–∏—à–∫–µ–∫',
        'total_amount': 2500,
        'items': [
            {'name': '–†–æ–ª–ª –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è', 'quantity': 2, 'price': 800},
            {'name': '–†–æ–ª–ª –§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è', 'quantity': 1, 'price': 900}
        ]
    }
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É
        notify_admins_new_order(test_order)
        bot.send_message(chat_id, "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É!")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã: {e}")





@bot.message_handler(func=lambda message: True)
def handle_text_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞)"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞
    if text.isdigit():
        order_id = int(text)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API —Å —Ç–æ–∫–µ–Ω–æ–º –∞–¥–º–∏–Ω–∞
            headers = {
                'Authorization': f'Bearer {ADMIN_TOKEN}',
                'Content-Type': 'application/json'
            }
            
            response = requests.get(f"{API_BASE_URL}/admin/orders/{order_id}", headers=headers, timeout=10)
            
            if response.status_code == 200:
                order = response.json()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
                status_emoji = get_status_emoji(order.get('status', 'pending'))
                status_text = get_status_text(order.get('status', 'pending'))
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                try:
                    created_at = order.get('created_at', '')
                    date = datetime.fromisoformat(created_at.replace('Z', '+00:00')).strftime('%d.%m.%Y %H:%M')
                except:
                    date = '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
                
                message_text = f"{status_emoji} –ó–∞–∫–∞–∑ #{order.get('id', 'N/A')}\n\n"
                message_text += f"üìÖ –î–∞—Ç–∞: {date}\n"
                message_text += f"üí∞ –°—É–º–º–∞: {order.get('total_amount', 0)} —Å–æ–º\n"
                message_text += f"üìç –ê–¥—Ä–µ—Å: {order.get('delivery_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                message_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order.get('customer_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                message_text += f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                items = order.get('items', [])
                if items:
                    message_text += "üõí –¢–æ–≤–∞—Ä—ã:\n"
                    for item in items:
                        if isinstance(item, dict):
                            message_text += f"‚Ä¢ {item.get('quantity', 1)}x {item.get('name', '–¢–æ–≤–∞—Ä')} - {item.get('price', 0)} —Å–æ–º\n"
                        else:
                            message_text += f"‚Ä¢ {item}\n"
                    message_text += "\n"
                
                message_text += f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.get('notes', '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')}"
                
                bot.send_message(chat_id, message_text)
                
            elif response.status_code == 404:
                bot.send_message(chat_id, '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            else:
                bot.send_message(chat_id, f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (—Å—Ç–∞—Ç—É—Å: {response.status_code})')
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
            bot.send_message(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.')
    else:
        bot.send_message(chat_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.')

def notify_admins_new_order(order_data):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    try:
        print(f"ü§ñ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ: {order_data}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        items_text = ""
        if 'items' in order_data and order_data['items']:
            for item in order_data['items']:
                if isinstance(item, dict):
                    name = item.get('name', '–¢–æ–≤–∞—Ä')
                    quantity = item.get('quantity', 1)
                    price = item.get('price', 0)
                    items_text += f"‚Ä¢ {name} x{quantity} - {price} —Å–æ–º\n"
                else:
                    items_text += f"‚Ä¢ {item}\n"
        else:
            items_text = "–¢–æ–≤–∞—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ë–∏—à–∫–µ–∫–µ (UTC+6)
        from datetime import timezone, timedelta
        bishkek_tz = timezone(timedelta(hours=6))
        current_time = datetime.now(bishkek_tz).strftime('%d.%m.%Y, %H:%M')
        
        message = f"""
üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!

üìã –ó–∞–∫–∞–∑ #{order_data.get('id', 'N/A')}
üë§ –ö–ª–∏–µ–Ω—Ç: {order_data.get('customer_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order_data.get('customer_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìç –ê–¥—Ä–µ—Å: {order_data.get('delivery_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üí∞ –°—É–º–º–∞: {order_data.get('total_amount', 0)} —Å–æ–º
‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã

üõí –¢–æ–≤–∞—Ä—ã:
{items_text}

‚è∞ –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {current_time} –≤—Ä–µ–º—è –±–∏—à–∫–µ–∫
        """
        
        bot.send_message(ADMIN_GROUP_ID, message.strip())
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order_data.get('id', 'N/A')} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º: {e}")
        import traceback
        traceback.print_exc()

def notify_new_order_webhook():
    """Webhook –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    print("üîó Webhook –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≥–æ—Ç–æ–≤")

# –î–æ–±–∞–≤–ª—è–µ–º HTTP endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/telegram-webhook/new-order', methods=['POST'])
def new_order_webhook():
    """Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö"""
    try:
        order_data = request.json
        
        if order_data:
            print(f"üÜï –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ webhook: {order_data}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            notify_admins_new_order(order_data)
            
            return jsonify({"status": "success", "message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}), 200
        else:
            return jsonify({"status": "error", "message": "–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã"}), 400
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

def start_webhook_server():
    """–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        app.run(host='0.0.0.0', port=5001, debug=False)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞: {e}")



def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    webhook_thread = threading.Thread(target=start_webhook_server, daemon=True)
    webhook_thread.start()
    print("üîó Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5001")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –≤ production
    if os.getenv('NODE_ENV') == 'production':
        try:
            bot.set_webhook(url=WEBHOOK_URL)
            print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
    else:
        print("üîÑ –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: webhook –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è")
    
    print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        bot.polling(none_stop=True, interval=0)
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    start_bot()
