#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import telebot
import requests
import os
import json
from datetime import datetime
import threading
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ (–∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–æ)
BOT_TOKEN = '8336008623:AAHWO3vRgVceBeJvjMVaPBdZMkNTBB-MHCc'
ADMIN_GROUP_ID = -1002728692510
WEBHOOK_URL = 'https://mnogo-rolly.online/telegram-webhook'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = 'https://mnogo-rolly.online/api'
LOCAL_API_URL = 'http://127.0.0.1:3000/api'

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...")
    
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API
        response = requests.get(f"{API_BASE_URL}/products", timeout=5)
        if response.status_code == 200:
            print(f"‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω: {API_BASE_URL}")
            return True
        else:
            print(f"‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

def get_status_emoji(status):
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    status_map = {
        'pending': '‚è≥',
        'confirmed': '‚úÖ',
        'preparing': 'üë®‚Äçüç≥',
        'ready': 'üöö',
        'delivered': 'üéâ',
        'cancelled': '‚ùå'
    }
    return status_map.get(status, '‚ùì')

def get_status_text(status):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞"""
    status_map = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        'preparing': '–ì–æ—Ç–æ–≤–∏—Ç—Å—è',
        'ready': '–ì–æ—Ç–æ–≤ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ',
        'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    }
    return status_map.get(status, status)

@bot.message_handler(commands=['start'])
def start_command(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    chat_id = message.chat.id
    user = message.from_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT OR IGNORE INTO telegram_users (telegram_id, username, first_name, last_name)
        VALUES (?, ?, ?, ?)
    ''', (user.id, user.username, user.first_name, user.last_name))
    
    conn.commit()
    conn.close()
    
    welcome_message = f"""
üçï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–∫–∞–∑–æ–≤ "–ú–Ω–æ–≥–æ –ü–µ–Ω–∏—Å–∞"!

üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/orders - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã
/order <–Ω–æ–º–µ—Ä> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
/help - –ü–æ–º–æ—â—å

üí° –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /order <–Ω–æ–º–µ—Ä>
    """
    
    bot.send_message(chat_id, welcome_message.strip())
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")

@bot.message_handler(commands=['orders'])
def orders_command(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /orders"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ API
        response = requests.get(f"{API_BASE_URL}/orders", timeout=10)
        
        if response.status_code == 200:
            orders = response.json()
            
            if not orders or len(orders) == 0:
                bot.send_message(chat_id, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤. –°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Å–∞–π—Ç–µ! üõí')
                return
            
            message_text = 'üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n\n'
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤
            for order in orders[:5]:
                order_id = order.get('id', 'N/A')
                status = order.get('status', 'pending')
                total_amount = order.get('total_amount', 0)
                created_at = order.get('created_at', '')
                delivery_address = order.get('delivery_address', '–ù–µ —É–∫–∞–∑–∞–Ω')
                
                status_emoji = get_status_emoji(status)
                status_text = get_status_text(status)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                try:
                    date = datetime.fromisoformat(created_at.replace('Z', '+00:00')).strftime('%d.%m.%Y')
                except:
                    date = '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
                
                message_text += f"{status_emoji} –ó–∞–∫–∞–∑ #{order_id}\n"
                message_text += f"üí∞ –°—É–º–º–∞: {total_amount} ‚ÇΩ\n"
                message_text += f"üìÖ –î–∞—Ç–∞: {date}\n"
                message_text += f"üìç –ê–¥—Ä–µ—Å: {delivery_address}\n"
                message_text += f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
            
            message_text += 'üí° –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /order <–Ω–æ–º–µ—Ä>'
            bot.send_message(chat_id, message_text)
            
        else:
            bot.send_message(chat_id, f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ (—Å—Ç–∞—Ç—É—Å: {response.status_code})')
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
        bot.send_message(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        bot.send_message(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.')

@bot.message_handler(commands=['order'])
def order_detail_command(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /order <–Ω–æ–º–µ—Ä>"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    command_parts = message.text.split()
    if len(command_parts) != 2:
        bot.send_message(chat_id, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /order <–Ω–æ–º–µ—Ä>\n–ü—Ä–∏–º–µ—Ä: /order 123')
        return
    
    try:
        order_id = int(command_parts[1])
    except ValueError:
        bot.send_message(chat_id, '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API
        response = requests.get(f"{API_BASE_URL}/orders/{order_id}", timeout=10)
        
        if response.status_code == 200:
            order = response.json()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
            status_emoji = get_status_emoji(order.get('status', 'pending'))
            status_text = get_status_text(order.get('status', 'pending'))
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            try:
                created_at = order.get('created_at', '')
                date = datetime.fromisoformat(created_at.replace('Z', '+00:00')).strftime('%d.%m.%Y %H:%M')
            except:
                date = '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
            
            message_text = f"{status_emoji} –ó–∞–∫–∞–∑ #{order.get('id', 'N/A')}\n\n"
            message_text += f"üìÖ –î–∞—Ç–∞: {date}\n"
            message_text += f"üí∞ –°—É–º–º–∞: {order.get('total_amount', 0)} ‚ÇΩ\n"
            message_text += f"üìç –ê–¥—Ä–µ—Å: {order.get('delivery_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            message_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order.get('customer_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            message_text += f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            items = order.get('items', [])
            if items:
                message_text += "üõí –¢–æ–≤–∞—Ä—ã:\n"
                for item in items:
                    if isinstance(item, dict):
                        message_text += f"‚Ä¢ {item.get('quantity', 1)}x {item.get('name', '–¢–æ–≤–∞—Ä')} - {item.get('price', 0)} ‚ÇΩ\n"
                    else:
                        message_text += f"‚Ä¢ {item}\n"
                message_text += "\n"
            
            message_text += f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.get('notes', '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')}"
            
            bot.send_message(chat_id, message_text)
            
        elif response.status_code == 404:
            bot.send_message(chat_id, '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        else:
            bot.send_message(chat_id, f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (—Å—Ç–∞—Ç—É—Å: {response.status_code})')
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        bot.send_message(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        bot.send_message(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.')

@bot.message_handler(commands=['help'])
def help_command(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    chat_id = message.chat.id
    
    help_text = """
üîß –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/orders - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã
/order <–Ω–æ–º–µ—Ä> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/test - –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É

üí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
‚Ä¢ /order 123 - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑ ‚Ññ123
‚Ä¢ /orders - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤

üåê –°–∞–π—Ç: https://mnogo-rolly.online
üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @admin_username
    """
    
    bot.send_message(chat_id, help_text.strip())

@bot.message_handler(commands=['test'])
def test_command(message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    chat_id = message.chat.id
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    test_order = {
        'order_number': 'TEST-123',
        'customer_name': '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
        'customer_phone': '+79001234567',
        'delivery_address': '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å',
        'total_amount': 1500,
        'notes': '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑',
        'items': [
            {'name': '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ–ª–ª', 'quantity': 2, 'price': 750}
        ]
    }
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É
        notify_admins_new_order(test_order)
        bot.send_message(chat_id, "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É!")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã: {e}")

@bot.message_handler(commands=['dbinfo'])
def dbinfo_command(message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    chat_id = message.chat.id
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
        table_info = []
        for table in tables:
            table_name = table[0]
            cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
            count = cursor.fetchone()[0]
            table_info.append(f"‚Ä¢ {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id = message.from_user.id
        cursor.execute("SELECT COUNT(*) FROM telegram_users WHERE telegram_id = ?", (user_id,))
        user_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM telegram_orders WHERE telegram_id = ?", (user_id,))
        orders_count = cursor.fetchone()[0]
        
        message_text = f"""
üóÑÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:

üìã –¢–∞–±–ª–∏—Ü—ã:
{chr(10).join(table_info)}

üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if user_count > 0 else '–ù–µ—Ç'}
‚Ä¢ –°–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {orders_count}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        
        bot.send_message(chat_id, message_text.strip())
        conn.close()
        
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã dbinfo: {e}")

@bot.message_handler(func=lambda message: True)
def handle_text_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞)"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞
    if text.isdigit():
        order_id = int(text)
        
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
            cursor.execute('''
                SELECT o.*, GROUP_CONCAT(oi.quantity || 'x ' || p.name) as items
                FROM orders o
                LEFT JOIN order_items oi ON o.id = oi.order_id
                LEFT JOIN products p ON oi.product_id = p.id
                JOIN telegram_orders t_orders ON o.id = t_orders.order_id
                WHERE o.id = ? AND t_orders.telegram_id = ?
                GROUP BY o.id
            ''', (order_id, user_id))
            
            order = cursor.fetchone()
            
            if not order:
                bot.send_message(chat_id, '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.')
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
            status_emoji = get_status_emoji(order[6])  # status
            status_text = get_status_text(order[6])
            date = datetime.fromisoformat(order[8]).strftime('%d.%m.%Y %H:%M')  # created_at
            
            message_text = f"{status_emoji} –ó–∞–∫–∞–∑ #{order[0]}\n\n"
            message_text += f"üìÖ –î–∞—Ç–∞: {date}\n"
            message_text += f"üí∞ –°—É–º–º–∞: {order[5]} ‚ÇΩ\n"  # total_amount
            message_text += f"üìç –ê–¥—Ä–µ—Å: {order[4] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"  # delivery_address
            message_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order[3] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"  # customer_phone
            message_text += f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
            
            if order[-1]:  # items
                message_text += f"üõí –¢–æ–≤–∞—Ä—ã:\n{order[-1]}\n\n"
            
            message_text += f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order[7] or '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}"  # notes
            
            bot.send_message(chat_id, message_text)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
            bot.send_message(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.')
        
        finally:
            conn.close()
    else:
        bot.send_message(chat_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.')

def notify_admins_new_order(order_data):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    try:
        print(f"ü§ñ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ: {order_data}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        items_text = ""
        if 'items' in order_data and order_data['items']:
            for item in order_data['items']:
                if isinstance(item, dict):
                    items_text += f"‚Ä¢ {item.get('quantity', 1)}x {item.get('name', '–¢–æ–≤–∞—Ä')} - {item.get('price', 0)} ‚ÇΩ\n"
                else:
                    items_text += f"‚Ä¢ {item}\n"
        else:
            items_text = "–¢–æ–≤–∞—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
        
        message = f"""
üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_data.get('order_number', 'N/A')}!

üë§ –ö–ª–∏–µ–Ω—Ç: {order_data.get('customer_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order_data.get('customer_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìç –ê–¥—Ä–µ—Å: {order_data.get('delivery_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üí∞ –°—É–º–º–∞: {order_data.get('total_amount', 0)} ‚ÇΩ
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order_data.get('notes', '–ù–µ—Ç')}

üõí –¢–æ–≤–∞—Ä—ã:
{items_text}

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}
        """
        
        bot.send_message(ADMIN_GROUP_ID, message.strip())
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order_data.get('order_number', 'N/A')} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º: {e}")
        import traceback
        traceback.print_exc()

def notify_client_status_change(order_id, new_status, client_telegram_id):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    try:
        status_emoji = get_status_emoji(new_status)
        status_text = get_status_text(new_status)
        
        message = f"""
{status_emoji} –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω!

üìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status_text}

üîÑ –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /order {order_id}
        """
        
        bot.send_message(client_telegram_id, message.strip())
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {client_telegram_id}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {e}")

def link_order_with_telegram_user(order_id, phone):
    """–°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Telegram –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        cursor.execute('SELECT telegram_id FROM telegram_users WHERE phone = ?', (phone,))
        user = cursor.fetchone()
        
        if user:
            telegram_id = user[0]
            
            # –°–≤—è–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            cursor.execute('''
                INSERT OR IGNORE INTO telegram_orders (telegram_id, order_id)
                VALUES (?, ?)
            ''', (telegram_id, order_id))
            
            conn.commit()
            print(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} —Å–≤—è–∑–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Telegram {telegram_id}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
            notify_client_status_change(order_id, 'pending', telegram_id)
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")

def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –≤ production
    if os.getenv('NODE_ENV') == 'production':
        try:
            bot.set_webhook(url=WEBHOOK_URL)
            print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
    else:
        print("üîÑ –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: webhook –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è")
    
    print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        bot.polling(none_stop=True, interval=0)
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    start_bot()
