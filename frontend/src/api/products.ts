import { Product } from '../types';
import { apiClient } from './client';

export const getAllProducts = async (): Promise<Product[]> => {
  try {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã...');
    const response = await apiClient.get('/products');
    
    if (response.data && Array.isArray(response.data)) {
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${response.data.length} —Ç–æ–≤–∞—Ä–æ–≤`);
      return response.data;
    } else {
      console.warn('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:', response.data);
      return [];
    }
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    
    if (error.response) {
      console.error('üö® –°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('üö® –î–∞–Ω–Ω—ã–µ:', error.response.data);
    } else if (error.request) {
      console.error('üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º');
    } else {
      console.error('üö® –û—à–∏–±–∫–∞:', error.message);
    }
    
    throw new Error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
  }
};

export const getProductById = async (id: string | number): Promise<Product | null> => {
  try {
    const response = await apiClient.get(`/products/${id}`);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    return null;
  }
};

export const getProductsByCategory = async (category: string): Promise<Product[]> => {
  try {
    const response = await apiClient.get(`/products/category/${category}`);
    return response.data || [];
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    return [];
  }
};
