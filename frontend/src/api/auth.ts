import { client } from './client';

export interface LoginRequest {
  email: string;
  password: string;
}

export interface RegisterRequest {
  email: string;
  password: string;
  name: string;
  phone?: string;
  address?: string;
}

export interface NormalizedAuthResponse {
  access_token: string;
  user: {
    id: number;
    email: string;
    name: string;
    phone?: string;
    address?: string;
    isAdmin?: boolean;
  };
}

export const authApi = {
  // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  login: async (data: LoginRequest): Promise<NormalizedAuthResponse> => {
    try {
      console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è:', data.email);
      const response = await client.post('/auth/login', data);
      console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
      
      const r = response.data;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
      if (!r.success) {
        throw new Error(r.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
      }
      
      // –ë—ç–∫–µ–Ω–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { success, data: { user, token } }
      const user = r?.data?.user || r?.user;
      const token = r?.data?.token || r?.token;
      
      if (!user || !token) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞');
      }
      
      console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.name);
      
      return {
        access_token: token,
        user,
      };
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
      
      if (error.response) {
        // –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        const errorMessage = error.response.data?.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
        throw new Error(errorMessage);
      } else if (error.request) {
        // –û—à–∏–±–∫–∞ —Å–µ—Ç–∏
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
      } else {
        // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
        throw new Error(error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }
    }
  },

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  register: async (data: RegisterRequest): Promise<NormalizedAuthResponse> => {
    try {
      console.log('üìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è:', data.email);
      const response = await client.post('/auth/register', data);
      console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
      
      const r = response.data;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
      if (!r.success) {
        throw new Error(r.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      }
      
      const user = r?.data?.user || r?.user;
      const token = r?.data?.token || r?.token;
      
      if (!user || !token) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞');
      }
      
      console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.name);
      
      return {
        access_token: token,
        user,
      };
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      
      if (error.response) {
        // –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        const errorMessage = error.response.data?.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
        throw new Error(errorMessage);
      } else if (error.request) {
        // –û—à–∏–±–∫–∞ —Å–µ—Ç–∏
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
      } else {
        // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
        throw new Error(error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getProfile: async (): Promise<any> => {
    try {
      const response = await client.get('/user/me');
      return response.data;
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      throw error;
    }
  },
};
