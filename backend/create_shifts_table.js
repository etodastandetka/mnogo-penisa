const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPath = './data/mnogo_rolly.db';
const db = new sqlite3.Database(dbPath);

console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–º–µ–Ω...\n');

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–º–µ–Ω
const createShiftsTable = `
CREATE TABLE IF NOT EXISTS shifts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    shift_number TEXT UNIQUE NOT NULL,
    opened_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    closed_at DATETIME,
    opened_by INTEGER NOT NULL,
    closed_by INTEGER,
    total_orders INTEGER DEFAULT 0,
    total_revenue REAL DEFAULT 0,
    cash_revenue REAL DEFAULT 0,
    card_revenue REAL DEFAULT 0,
    status TEXT DEFAULT 'open' CHECK(status IN ('open', 'closed')),
    notes TEXT,
    FOREIGN KEY (opened_by) REFERENCES users(id),
    FOREIGN KEY (closed_by) REFERENCES users(id)
)`;

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–µ—Ç–∞–ª–µ–π —Å–º–µ–Ω—ã
const createShiftDetailsTable = `
CREATE TABLE IF NOT EXISTS shift_details (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    shift_id INTEGER NOT NULL,
    order_id INTEGER NOT NULL,
    order_number TEXT NOT NULL,
    customer_name TEXT,
    total_amount REAL NOT NULL,
    payment_method TEXT NOT NULL,
    created_at DATETIME NOT NULL,
    FOREIGN KEY (shift_id) REFERENCES shifts(id),
    FOREIGN KEY (order_id) REFERENCES orders(id)
)`;

db.serialize(() => {
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–º–µ–Ω
    db.run(createShiftsTable, (err) => {
        if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã shifts:', err);
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ shifts —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        }
    });

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–µ—Ç–∞–ª–µ–π —Å–º–µ–Ω—ã
    db.run(createShiftDetailsTable, (err) => {
        if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã shift_details:', err);
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ shift_details —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        }
    });

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    db.run('CREATE INDEX IF NOT EXISTS idx_shifts_status ON shifts(status)', (err) => {
        if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ shifts_status:', err);
        } else {
            console.log('‚úÖ –ò–Ω–¥–µ–∫—Å shifts_status —Å–æ–∑–¥–∞–Ω');
        }
    });

    db.run('CREATE INDEX IF NOT EXISTS idx_shifts_opened_at ON shifts(opened_at)', (err) => {
        if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ shifts_opened_at:', err);
        } else {
            console.log('‚úÖ –ò–Ω–¥–µ–∫—Å shifts_opened_at —Å–æ–∑–¥–∞–Ω');
        }
    });

    db.run('CREATE INDEX IF NOT EXISTS idx_shift_details_shift_id ON shift_details(shift_id)', (err) => {
        if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ shift_details_shift_id:', err);
        } else {
            console.log('‚úÖ –ò–Ω–¥–µ–∫—Å shift_details_shift_id —Å–æ–∑–¥–∞–Ω');
        }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–º–µ–Ω–∞
    db.get('SELECT * FROM shifts WHERE status = "open" ORDER BY opened_at DESC LIMIT 1', (err, shift) => {
        if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–º–µ–Ω—ã:', err);
        } else if (!shift) {
            console.log('üìù –û—Ç–∫—Ä—ã—Ç–æ–π —Å–º–µ–Ω—ã –Ω–µ—Ç. –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é —Å–º–µ–Ω—É...');
            
            // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é —Å–º–µ–Ω—É
            const insertShift = `
                INSERT INTO shifts (shift_number, opened_by, status, notes)
                VALUES (?, 1, 'open', '–ü–µ—Ä–≤–∞—è —Å–º–µ–Ω–∞')
            `;
            
            db.run(insertShift, [`SHIFT-${Date.now()}`], function(err) {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π —Å–º–µ–Ω—ã:', err);
                } else {
                    console.log('‚úÖ –ü–µ—Ä–≤–∞—è —Å–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID:', this.lastID);
                }
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π
                db.close((err) => {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
                    } else {
                        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞');
                        console.log('\nüéâ –¢–∞–±–ª–∏—Ü—ã —Å–º–µ–Ω —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
                    }
                });
            });
        } else {
            console.log('‚úÖ –û—Ç–∫—Ä—ã—Ç–∞—è —Å–º–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞:', shift.shift_number);
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π
            db.close((err) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
                } else {
                    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞');
                    console.log('\nüéâ –¢–∞–±–ª–∏—Ü—ã —Å–º–µ–Ω —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
                }
            });
        }
    });
});
