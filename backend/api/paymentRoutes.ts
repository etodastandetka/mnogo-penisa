import express from 'express';
import { freedomPayService } from './freedompay';
import sqlite3 from 'sqlite3';
import path from 'path';

const router = express.Router();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, '../data/mnogo_rolly.db');
const db = new sqlite3.Database(dbPath);

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const logPaymentRequest = (req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.log('üí∞ FreedomPay: –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å', {
    method: req.method,
    url: req.url,
    body: req.body,
    query: req.query,
    headers: req.headers
  });
  next();
};

// –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ –≤—Å–µ–º —Ä–æ—É—Ç–∞–º
router.use(logPaymentRequest);

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞
 * POST /api/payments/freedompay/init
 */
router.post('/freedompay/init', async (req, res) => {
  try {
    const { orderId, amount, description } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!orderId || !amount || !description) {
      return res.status(400).json({
        success: false,
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: orderId, amount, description'
      });
    }

    if (amount <= 0) {
      return res.status(400).json({
        success: false,
        message: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ
    const order = await new Promise((resolve, reject) => {
      db.get(
        'SELECT id, total_amount, status FROM orders WHERE id = ?',
        [orderId],
        (err, row) => {
          if (err) reject(err);
          else resolve(row);
        }
      );
    });

    if (!order) {
      return res.status(404).json({
        success: false,
        message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    if ((order as any).status !== 'pending') {
      return res.status(400).json({
        success: false,
        message: '–ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω'
      });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ, —Ç–∞–∫ –∫–∞–∫ .env –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const baseUrl = 'http://localhost:3000'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    const urls = {
      successUrl: `${baseUrl}/payment/success`,
      failureUrl: `${baseUrl}/payment/failure`,
      resultUrl: `${baseUrl}/api/payments/freedompay/result`,
      checkUrl: `${baseUrl}/api/payments/freedompay/check`
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂ –≤ FreedomPay
    const paymentResult = await freedomPayService.initPayment({
      orderId: orderId.toString(),
      amount: parseFloat(amount),
      description,
      ...urls
    });

    if (paymentResult.pg_status === 'ok' && paymentResult.pg_redirect_url) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑—É
      await new Promise((resolve, reject) => {
        db.run(
          `INSERT INTO payment_transactions (
            order_id, payment_id, amount, status, created_at, updated_at
          ) VALUES (?, ?, ?, ?, datetime('now'), datetime('now'))`,
          [orderId, paymentResult.pg_payment_id || 'pending', amount, 'pending'],
          (err) => {
            if (err) reject(err);
            else resolve(true);
          }
        );
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      await new Promise((resolve, reject) => {
        db.run(
          'UPDATE orders SET payment_status = ? WHERE id = ?',
          ['processing', orderId],
          (err) => {
            if (err) reject(err);
            else resolve(true);
          }
        );
      });

      return res.json({
        success: true,
        paymentUrl: paymentResult.pg_redirect_url,
        paymentId: paymentResult.pg_payment_id,
        message: '–ü–ª–∞—Ç–µ–∂ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ'
      });
    } else {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      console.error('‚ùå FreedomPay: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', paymentResult);
      
      return res.status(400).json({
        success: false,
        message: paymentResult.pg_error_description || '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞',
        errorCode: paymentResult.pg_error_code
      });
    }
  } catch (error: any) {
    console.error('‚ùå FreedomPay: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞', error);
    
    return res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ (webhook –æ—Ç FreedomPay)
 * POST /api/payments/freedompay/result
 */
router.post('/freedompay/result', async (req, res) => {
  try {
    console.log('üí∞ FreedomPay: –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–ª–∞—Ç–µ–∂–∞', req.body);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞—Ç–µ–∂–∞
    const result = freedomPayService.processPaymentResult(req.body);

    if (!result.isValid) {
      console.error('‚ùå FreedomPay: –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      return res.status(400).json({ error: 'INVALID_SIGNATURE' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑–µ
    await new Promise((resolve, reject) => {
      db.run(
        `UPDATE payment_transactions 
         SET status = ?, updated_at = datetime('now')
         WHERE order_id = ?`,
        [result.isSuccess ? 'completed' : 'failed', result.orderId],
        (err) => {
          if (err) reject(err);
          else resolve(true);
        }
      );
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    const newOrderStatus = result.isSuccess ? 'paid' : 'payment_failed';
    const newPaymentStatus = result.isSuccess ? 'paid' : 'failed';

    await new Promise((resolve, reject) => {
      db.run(
        `UPDATE orders 
         SET status = ?, payment_status = ?, updated_at = datetime('now')
         WHERE id = ?`,
        [newOrderStatus, newPaymentStatus, result.orderId],
        (err) => {
          if (err) reject(err);
          else resolve(true);
        }
      );
    });

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log(`‚úÖ FreedomPay: –ü–ª–∞—Ç–µ–∂ ${result.isSuccess ? '—É—Å–ø–µ—à–µ–Ω' : '–Ω–µ—É—Å–ø–µ—à–µ–Ω'} –¥–ª—è –∑–∞–∫–∞–∑–∞ ${result.orderId}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç FreedomPay
    res.json({ result: 'OK' });
  } catch (error: any) {
    console.error('‚ùå FreedomPay: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞', error);
    res.status(500).json({ error: 'INTERNAL_ERROR' });
  }
});

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–∞
 * POST /api/payments/freedompay/check
 */
router.post('/freedompay/check', async (req, res) => {
  try {
    const { orderId, amount } = req.body;

    console.log('üîç FreedomPay: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–∞', { orderId, amount });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    const order = await new Promise((resolve, reject) => {
      db.get(
        'SELECT id, total_amount, status FROM orders WHERE id = ?',
        [orderId],
        (err, row) => {
          if (err) reject(err);
          else resolve(row);
        }
      );
    });

    if (!order) {
      return res.json({ result: 'REJECTED', reason: 'ORDER_NOT_FOUND' });
    }

    if ((order as any).status !== 'pending') {
      return res.json({ result: 'REJECTED', reason: 'ORDER_ALREADY_PROCESSED' });
    }

    if (Math.abs((order as any).total_amount - amount) > 0.01) {
      return res.json({ result: 'REJECTED', reason: 'AMOUNT_MISMATCH' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
    const isHealthy = await freedomPayService.checkHealth();
    if (!isHealthy) {
      return res.json({ result: 'REJECTED', reason: 'SERVICE_UNAVAILABLE' });
    }

    console.log('‚úÖ FreedomPay: –ü–ª–∞—Ç–µ–∂ —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞', orderId);
    return res.json({ result: 'OK' });
  } catch (error: any) {
    console.error('‚ùå FreedomPay: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞', error);
    return res.json({ result: 'REJECTED', reason: 'INTERNAL_ERROR' });
  }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
 * GET /api/payments/freedompay/status/:orderId
 */
router.get('/freedompay/status/:orderId', async (req, res) => {
  try {
    const { orderId } = req.params;

    const transaction = await new Promise((resolve, reject) => {
      db.get(
        `SELECT pt.*, o.status as order_status, o.payment_status 
         FROM payment_transactions pt
         JOIN orders o ON pt.order_id = o.id
         WHERE pt.order_id = ?`,
        [orderId],
        (err, row) => {
          if (err) reject(err);
          else resolve(row);
        }
      );
    });

    if (!transaction) {
      return res.status(404).json({
        success: false,
        message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    return res.json({
      success: true,
      data: {
        orderId: transaction.order_id,
        paymentId: transaction.payment_id,
        amount: transaction.amount,
        status: transaction.status,
        orderStatus: transaction.order_status,
        paymentStatus: transaction.payment_status,
        createdAt: transaction.created_at,
        updatedAt: transaction.updated_at
      }
    });
  } catch (error: any) {
    console.error('‚ùå FreedomPay: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞', error);
    
    return res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * Healthcheck –¥–ª—è FreedomPay
 * GET /api/payments/freedompay/health
 */
router.get('/freedompay/health', async (req, res) => {
  try {
    const isHealthy = await freedomPayService.checkHealth();
    
    return res.json({
      success: true,
      healthy: isHealthy,
      timestamp: new Date().toISOString(),
      service: 'FreedomPay'
    });
  } catch (error: any) {
    console.error('‚ùå FreedomPay: –û—à–∏–±–∫–∞ healthcheck', error);
    
    return res.status(500).json({
      success: false,
      healthy: false,
      error: error.message
    });
  }
});

export default router;
