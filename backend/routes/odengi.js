const express = require('express');
const router = express.Router();
const odengiService = require('../odengi-service');
const sqlite3 = require('sqlite3').verbose();

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database('./database.sqlite');

// –°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
router.post('/create-qr', async (req, res) => {
  try {
    const { orderId, amount, description, customerPhone } = req.body;
    
    if (!orderId || !amount) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã orderId –∏ amount'
      });
    }

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ O!Dengi
    const result = await odengiService.createInvoice({
      orderId,
      amount: parseFloat(amount),
      description,
      customerPhone,
      resultUrl: `${req.protocol}://${req.get('host')}/api/odengi/callback`
    });

    if (result.success) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≤–æ–π—Å–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      db.run(`
        INSERT OR REPLACE INTO odengi_invoices 
        (order_id, invoice_id, qr_url, amount, currency, status, created_at)
        VALUES (?, ?, ?, ?, ?, ?, ?)
      `, [
        orderId,
        result.invoiceId,
        result.qrUrl,
        result.amount,
        result.currency,
        'pending',
        new Date().toISOString()
      ], function(err) {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ –≤ –ë–î:', err);
        }
      });

      res.json({
        success: true,
        qrUrl: result.qrUrl,
        invoiceId: result.invoiceId,
        amount: result.amount,
        currency: result.currency
      });
    } else {
      res.status(400).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
router.get('/status/:orderId', async (req, res) => {
  try {
    const { orderId } = req.params;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≤–æ–π—Å–µ –∏–∑ –ë–î
    const invoice = await new Promise((resolve, reject) => {
      db.get(
        'SELECT * FROM odengi_invoices WHERE order_id = ? ORDER BY created_at DESC LIMIT 1',
        [orderId],
        (err, row) => {
          if (err) reject(err);
          else resolve(row);
        }
      );
    });

    if (!invoice) {
      return res.status(404).json({
        success: false,
        error: '–ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API
    const statusResult = await odengiService.checkPaymentStatus(
      invoice.invoice_id,
      orderId
    );

    if (statusResult.success) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
      db.run(
        'UPDATE odengi_invoices SET status = ?, updated_at = ? WHERE invoice_id = ?',
        [statusResult.status === 3 ? 'paid' : 'pending', new Date().toISOString(), invoice.invoice_id]
      );

      res.json({
        success: true,
        status: statusResult.status === 3 ? 'paid' : 'pending',
        amount: statusResult.amount / 100, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–æ–º—ã
        currency: statusResult.currency,
        transId: statusResult.transId
      });
    } else {
      res.json({
        success: false,
        error: statusResult.error
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// Callback –æ—Ç O!Dengi (webhook)
router.post('/callback', async (req, res) => {
  try {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω callback –æ—Ç O!Dengi:', JSON.stringify(req.body, null, 2));
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback
    const result = odengiService.processCallback(req.body);
    
    if (!result.success) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', result.error);
      return res.status(400).json({ error: result.error });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    db.run(`
      UPDATE odengi_invoices 
      SET status = ?, trans_id = ?, updated_at = ?
      WHERE order_id = ?
    `, [
      result.status,
      result.transId,
      new Date().toISOString(),
      result.orderId
    ], function(err) {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î:', err);
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    if (result.status === 'paid') {
      db.run(`
        UPDATE orders 
        SET payment_status = 'paid', payment_method = 'odengi_qr'
        WHERE id = ?
      `, [result.orderId], function(err) {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', err);
        } else {
          console.log('‚úÖ –ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π');
        }
      });
    }

    // –û—Ç–≤–µ—á–∞–µ–º O!Dengi —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    res.json({ status: 'ok' });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –û—Ç–º–µ–Ω–∞ –∏–Ω–≤–æ–π—Å–∞
router.post('/cancel/:invoiceId', async (req, res) => {
  try {
    const { invoiceId } = req.params;
    
    const result = await odengiService.cancelInvoice(invoiceId);
    
    if (result.success) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
      db.run(
        'UPDATE odengi_invoices SET status = ?, updated_at = ? WHERE invoice_id = ?',
        ['cancelled', new Date().toISOString(), invoiceId]
      );

      res.json({
        success: true,
        message: result.message
      });
    } else {
      res.status(400).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∏–Ω–≤–æ–π—Å–∞:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
router.get('/history', async (req, res) => {
  try {
    const { dateFrom, dateTo } = req.query;
    
    let query = 'SELECT * FROM odengi_invoices WHERE 1=1';
    const params = [];
    
    if (dateFrom) {
      query += ' AND created_at >= ?';
      params.push(dateFrom);
    }
    
    if (dateTo) {
      query += ' AND created_at <= ?';
      params.push(dateTo);
    }
    
    query += ' ORDER BY created_at DESC';
    
    const invoices = await new Promise((resolve, reject) => {
      db.all(query, params, (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    res.json({
      success: true,
      invoices: invoices.map(invoice => ({
        ...invoice,
        amount: invoice.amount / 100 // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–æ–º—ã
      }))
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

module.exports = router;
