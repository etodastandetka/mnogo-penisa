import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useUserStore } from '../store/userStore';
import { AdminLayout } from '../components/admin/AdminLayout';
import { Button } from '../components/ui/Button';
import { Card, CardContent, CardHeader } from '../components/ui/Card';
import { Badge } from '../components/ui/Badge';
import { OrderDetailModal } from '../components/admin/OrderDetailModal';
import {
  Filter,
  Search,
  RefreshCw,
  Package,
  Calendar,
  Phone,
  MapPin,
  Clock,
  Printer,
  Eye,
  Receipt
} from 'lucide-react';
import { OrderStatus } from '../types';
import { formatPrice } from '../utils/format';
import { getOrders, updateOrderStatus, AdminOrder } from '../api/admin';


export const AdminOrdersPage: React.FC = () => {
  const navigate = useNavigate();
  const { user, isAdmin } = useUserStore();
  
  const [orders, setOrders] = useState<AdminOrder[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [selectedOrder, setSelectedOrder] = useState<AdminOrder | null>(null);
  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
  const [updatingOrderId, setUpdatingOrderId] = useState<number | null>(null);
  const [filters, setFilters] = useState({
    status: '',
    dateFrom: '',
    dateTo: '',
    search: '',
    hasPaymentProof: ''
  });

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    if (!user || !isAdmin) {
      navigate('/');
      return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã
    fetchOrders();

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(() => {
      fetchOrders();
    }, 30000);

    // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => clearInterval(interval);
  }, [user, isAdmin, navigate]);

  const fetchOrders = async () => {
    try {
      setLoading(true);
      const ordersData = await getOrders();
      setOrders(ordersData);
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤');
    } finally {
      setLoading(false);
    }
  };

  const handleUpdateOrderStatus = async (orderId: number, newStatus: string) => {
    try {
      setUpdatingOrderId(orderId);
      await updateOrderStatus(orderId, newStatus);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      setOrders(prev => prev.map(order => 
        order.id === orderId ? { ...order, status: newStatus } : order
      ));
      setError(''); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
    } finally {
      setUpdatingOrderId(null);
    }
  };

  const printReceipt = (order: AdminOrder) => {
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(`
        <!DOCTYPE html>
        <html lang="ru">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>–ß–µ–∫ –∑–∞–∫–∞–∑–∞ ${order.orderNumber || order.id || 'N/A'}</title>
          <style>
            body {
              font-family: 'Arial', 'Helvetica', 'Courier New', monospace;
              font-size: 12px;
              line-height: 1.2;
              margin: 0;
              padding: 10px;
              width: 80mm;
              -webkit-font-smoothing: antialiased;
              -moz-osx-font-smoothing: grayscale;
            }
            .header {
              text-align: center;
              border-bottom: 1px dashed #000;
              padding-bottom: 10px;
              margin-bottom: 10px;
            }
            .company-name {
              font-size: 14px;
              font-weight: bold;
              margin-bottom: 5px;
            }
            .company-info {
              font-size: 10px;
              margin-bottom: 5px;
            }
            .order-info {
              margin-bottom: 10px;
            }
            .order-number {
              font-weight: bold;
              margin-bottom: 5px;
            }
            .order-date {
              margin-bottom: 5px;
            }
            .customer-info {
              margin-bottom: 10px;
              border-bottom: 1px dashed #000;
              padding-bottom: 10px;
            }
            .items-table {
              width: 100%;
              margin-bottom: 10px;
            }
            .items-table th {
              text-align: left;
              border-bottom: 1px solid #000;
              padding: 2px 0;
            }
            .items-table td {
              padding: 2px 0;
              vertical-align: top;
            }
            .item-name {
              width: 60%;
            }
            .item-quantity {
              width: 15%;
              text-align: center;
            }
            .item-price {
              width: 25%;
              text-align: right;
            }
            .total-section {
              border-top: 1px dashed #000;
              padding-top: 10px;
              margin-bottom: 10px;
            }
            .total-row {
              display: flex;
              justify-content: space-between;
              margin-bottom: 2px;
            }
            .total-final {
              font-weight: bold;
              font-size: 14px;
              border-top: 1px solid #000;
              padding-top: 5px;
            }
            .footer {
              text-align: center;
              font-size: 10px;
              margin-top: 15px;
              border-top: 1px dashed #000;
              padding-top: 10px;
            }
            .tax-info {
              margin-bottom: 5px;
            }
            .qr-code {
              text-align: center;
              margin: 10px 0;
            }
            .qr-code img {
              width: 80px;
              height: 80px;
              margin: 0 auto;
              display: block;
            }
            @media print {
              body {
                width: 80mm;
                margin: 0;
                padding: 5px;
              }
            }
          </style>
        </head>
        <body>
          <div class="header">
            <div class="company-name">MNOGO ROLLY</div>
            <div class="company-info">–î–æ—Å—Ç–∞–≤–∫–∞ —Å—É—à–∏ –∏ —Ä–æ–ª–ª–æ–≤</div>
            <div class="company-info">–ò–ü: –°—É–ª—Ç–∞–Ω–∫—É–ª–æ–≤ –ê.–ë.</div>
            <div class="company-info">–ò–ù–ù: 20504198701431</div>
            <div class="company-info">–ê–¥—Ä–µ—Å: –≥. –ë–∏—à–∫–µ–∫, —É–ª. –ê—Ö—É–Ω–±–∞–µ–≤–∞, 182 –ë</div>
            <div class="company-info">–¢–µ–ª: +996 (709) 611-043</div>
            <div class="company-info">–ö–∞—Å—Å–∞: –ö–ö–¢-001</div>
          </div>

          <div class="order-info">
            <div class="order-number">–ó–∞–∫–∞–∑ ‚Ññ${order.orderNumber || order.id || 'N/A'}</div>
            <div class="order-date">–î–∞—Ç–∞: ${new Date(order.createdAt || new Date()).toLocaleDateString('ru-RU')}</div>
            <div class="order-date">–í—Ä–µ–º—è: ${new Date(order.createdAt || new Date()).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}</div>
          </div>

          <div class="customer-info">
            <div>–ö–ª–∏–µ–Ω—Ç: ${order.customerName || '–ì–æ—Å—Ç—å'}</div>
            <div>–¢–µ–ª–µ—Ñ–æ–Ω: ${order.customerPhone || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
            <div>–ê–¥—Ä–µ—Å: ${order.deliveryAddress || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
          </div>

          <table class="items-table">
            <thead>
              <tr>
                <th class="item-name">–¢–æ–≤–∞—Ä</th>
                <th class="item-quantity">–ö–æ–ª-–≤–æ</th>
                <th class="item-price">–¶–µ–Ω–∞</th>
              </tr>
            </thead>
            <tbody>
              ${(order.items || []).map((item: any) => `
                <tr>
                  <td class="item-name">${item.productName || '–¢–æ–≤–∞—Ä'}</td>
                  <td class="item-quantity">${item.quantity || 1}</td>
                  <td class="item-price">${item.price || 0} —Å–æ–º</td>
                </tr>
              `).join('')}
            </tbody>
          </table>

          <div class="total-section">
            <div class="total-row">
              <span>–ü–æ–¥—ã—Ç–æ–≥:</span>
              <span>${order.totalAmount || 0} —Å–æ–º</span>
            </div>
            <div class="total-row">
              <span>–î–æ—Å—Ç–∞–≤–∫–∞:</span>
              <span>0 —Å–æ–º</span>
            </div>
            <div class="total-row total-final">
              <span>–ò–¢–û–ì–û:</span>
              <span>${order.totalAmount || 0} —Å–æ–º</span>
            </div>
          </div>

          <div class="footer">
            <div class="tax-info">–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!</div>
            <div class="tax-info">–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!</div>
                      <div class="qr-code">
            <img src="/images/qr-tips.png" alt="QR –∫–æ–¥ –¥–ª—è —á–∞–µ–≤—ã—Ö" style="width: 80px; height: 80px; margin: 0 auto; display: block;" />
            <div style="font-size: 10px; margin-top: 5px;">QR code –î–ª—è —á–µ–∫–æ–≤</div>
          </div>
            <div class="tax-info">–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ Mnogo Rolly</div>
          </div>
        </body>
        </html>
      `);


      printWindow.document.close();
      printWindow.focus();
      printWindow.print();
      printWindow.close();
    }
  };

  const handleFilterChange = (key: string, value: string) => {
    setFilters(prev => ({ ...prev, [key]: value }));
  };

  const handleClearFilters = () => {
    setFilters({ status: '', dateFrom: '', dateTo: '', search: '', hasPaymentProof: '' });
  };

  const openOrderDetail = (order: AdminOrder) => {
    console.log('üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:', {
      id: order.id,
      orderNumber: order.orderNumber,
      paymentProof: order.paymentProof,
      paymentProofDate: order.paymentProofDate,
      hasPaymentProof: !!order.paymentProof
    });
    setSelectedOrder(order);
    setIsDetailModalOpen(true);
  };

  const closeOrderDetail = () => {
    setIsDetailModalOpen(false);
    setSelectedOrder(null);
  };

  const handleOrderUpdate = (updatedOrder: any) => {
    setOrders(prevOrders => 
      prevOrders.map(order => 
        order.id === updatedOrder.id ? { ...order, ...updatedOrder } : order
      )
    );
  };

  const getStatusColor = (status: string | OrderStatus) => {
    switch (status) {
      case 'pending': return 'bg-yellow-100 text-yellow-800';
      case 'preparing': return 'bg-blue-100 text-blue-800';
      case 'ready': return 'bg-green-100 text-green-800';
      case 'delivering': return 'bg-purple-100 text-purple-800';
      case 'delivered': return 'bg-gray-100 text-gray-800';
      case 'cancelled': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusText = (status: string | OrderStatus) => {
    switch (status) {
      case 'pending': return '–û–∂–∏–¥–∞–µ—Ç';
      case 'preparing': return '–ì–æ—Ç–æ–≤–∏—Ç—Å—è';
      case 'ready': return '–ì–æ—Ç–æ–≤';
      case 'delivering': return '–í –¥–æ—Å—Ç–∞–≤–∫–µ';
      case 'delivered': return '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
      case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω';
      default: return status;
    }
  };

  const statusOptions = [
    { value: '', label: '–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã' },
    { value: 'pending', label: '–û–∂–∏–¥–∞–µ—Ç' },
    { value: 'preparing', label: '–ì–æ—Ç–æ–≤–∏—Ç—Å—è' },
    { value: 'ready', label: '–ì–æ—Ç–æ–≤' },
    { value: 'delivering', label: '–í –¥–æ—Å—Ç–∞–≤–∫–µ' },
    { value: 'delivered', label: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω' },
    { value: 'cancelled', label: '–û—Ç–º–µ–Ω–µ–Ω' }
  ];

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤
  const filteredOrders = orders.filter(order => {
    if (filters.status && order.status !== filters.status) return false;
    if (filters.search) {
      const searchLower = filters.search.toLowerCase();
      return (
        order.orderNumber.toLowerCase().includes(searchLower) ||
        order.customerName.toLowerCase().includes(searchLower) ||
        order.customerPhone.includes(searchLower)
      );
    }
    if (filters.dateFrom && new Date(order.createdAt) < new Date(filters.dateFrom)) return false;
    if (filters.dateTo && new Date(order.createdAt) > new Date(filters.dateTo)) return false;
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ
    if (filters.hasPaymentProof === 'with' && !order.paymentProof) return false;
    if (filters.hasPaymentProof === 'without' && order.paymentProof) return false;
    
    return true;
  });

  return (
    <AdminLayout>
      <div className="p-4 sm:p-6 lg:p-8">
        <div className="mb-8">
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">–ó–∞–∫–∞–∑—ã</h1>
              <p className="text-gray-600 mt-2">
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ ‚Ä¢ 
                <span className="text-green-600 font-medium ml-1">
                  {orders.filter(o => o.paymentProof).length} —Å —á–µ–∫–∞–º–∏
                </span>
                <span className="text-gray-500 ml-1">
                  –∏–∑ {orders.length} –∑–∞–∫–∞–∑–æ–≤
                </span>
              </p>
            </div>
            <Button
              variant="outline"
              onClick={fetchOrders}
              disabled={loading}
              className="flex items-center space-x-2"
            >
              <RefreshCw className="w-4 h-4" />
              <span>{loading ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å'}</span>
            </Button>
          </div>
        </div>
        {error && (
          <div className="mb-6 bg-red-50 border border-red-200 rounded-xl p-4">
            <div className="flex items-center justify-between">
              <p className="text-red-600">{error}</p>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setError('')}
                className="text-red-600 hover:bg-red-100"
              >
                ‚úï
              </Button>
            </div>
          </div>
        )}

        {/* –§–∏–ª—å—Ç—Ä—ã */}
        <Card className="border-0 shadow-soft mb-6">
          <CardHeader>
            <div className="flex items-center space-x-2">
              <Filter className="h-5 w-5 text-gray-500" />
              <h3 className="text-lg font-semibold text-gray-900">–§–∏–ª—å—Ç—Ä—ã</h3>
            </div>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ü–æ–∏—Å–∫
                </label>
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <input
                    type="text"
                    placeholder="–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –∫–ª–∏–µ–Ω—Ç..."
                    value={filters.search}
                    onChange={(e) => handleFilterChange('search', e.target.value)}
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –°—Ç–∞—Ç—É—Å
                </label>
                <select 
                  value={filters.status}
                  onChange={(e) => handleFilterChange('status', e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500"
                >
                  {statusOptions.map(option => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –î–∞—Ç–∞ –æ—Ç
                </label>
                <input
                  type="date"
                  value={filters.dateFrom}
                  onChange={(e) => handleFilterChange('dateFrom', e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –î–∞—Ç–∞ –¥–æ
                </label>
                <input
                  type="date"
                  value={filters.dateTo}
                  onChange={(e) => handleFilterChange('dateTo', e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ
                </label>
                <select 
                  value={filters.hasPaymentProof}
                  onChange={(e) => handleFilterChange('hasPaymentProof', e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500"
                >
                  <option value="">–í—Å–µ –∑–∞–∫–∞–∑—ã</option>
                  <option value="with">–° —á–µ–∫–æ–º</option>
                  <option value="without">–ë–µ–∑ —á–µ–∫–∞</option>
                </select>
              </div>
            </div>

            <div className="flex justify-end mt-4">
              <Button
                variant="outline"
                onClick={handleClearFilters}
                className="text-gray-600 hover:bg-gray-50"
              >
                –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
              </Button>
            </div>
          </CardContent>
        </Card>

        {loading ? (
          <div className="text-center py-8">
            <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-red-600"></div>
            <p className="mt-2 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</p>
          </div>
        ) : (
          <div className="bg-white rounded-xl shadow-sm border border-gray-200">
            <div className="p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4">
                –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ ({filteredOrders.length})
              </h2>
              
              {filteredOrders.length === 0 ? (
                <div className="text-center py-8">
                  <p className="text-gray-500">–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {filteredOrders.map((order) => (
                    <div key={order.id} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50">
                      <div className="flex items-center justify-between">
                        <div className="flex-1">
                          <div className="flex items-center space-x-4">
                            <div>
                              <h3 className="font-medium text-gray-900">
                                #{order.orderNumber}
                              </h3>
                              <p className="text-sm text-gray-600">
                                {order.customerName} ‚Ä¢ {order.customerPhone}
                              </p>
                            </div>
                            <div>
                              <span className={`px-2 py-1 text-xs rounded-full ${getStatusColor(order.status)}`}>
                                {getStatusText(order.status)}
                              </span>
                            </div>
                          </div>
                          <div className="mt-2">
                            <p className="text-sm text-gray-600">
                              <strong>–¢–æ–≤–∞—Ä—ã:</strong> {order.items?.map((item: any) => `${item.productName} x${item.quantity}`).join(', ') || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}
                            </p>
                            <p className="text-sm text-gray-600">
                              <strong>–°—É–º–º–∞:</strong> {order.totalAmount?.toLocaleString() || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} —Å–æ–º
                            </p>
                            <p className="text-sm text-gray-600">
                              <strong>–î–∞—Ç–∞:</strong> {new Date(order.createdAt).toLocaleDateString('ru-RU')} {new Date(order.createdAt).toLocaleTimeString('ru-RU')}
                            </p>
                            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–∫–µ –æ–± –æ–ø–ª–∞—Ç–µ */}
                            {order.paymentProof && (
                              <div className="mt-2 flex items-center space-x-2">
                                <Receipt className="w-4 h-4 text-green-600" />
                                <span className="text-sm text-green-600 font-medium">
                                  –ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω
                                </span>
                                {order.paymentProofDate && (
                                  <span className="text-xs text-gray-500">
                                    ({new Date(order.paymentProofDate).toLocaleDateString('ru-RU')})
                                  </span>
                                )}
                              </div>
                            )}
                          </div>
                        </div>
                        
                        <div className="flex items-center space-x-2">
                          {/* –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ */}
                          {order.status === 'pending' && (
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleUpdateOrderStatus(order.id, 'preparing')}
                              disabled={updatingOrderId === order.id}
                              className="bg-blue-50 border-blue-200 text-blue-700 hover:bg-blue-100"
                            >
                              {updatingOrderId === order.id ? '...' : '–ì–æ—Ç–æ–≤–∏—Ç—Å—è'}
                            </Button>
                          )}
                          
                          {order.status === 'preparing' && (
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleUpdateOrderStatus(order.id, 'ready')}
                              disabled={updatingOrderId === order.id}
                              className="bg-green-50 border-green-200 text-green-700 hover:bg-green-100"
                            >
                              {updatingOrderId === order.id ? '...' : '–ì–æ—Ç–æ–≤'}
                            </Button>
                          )}
                          
                          {order.status === 'ready' && (
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleUpdateOrderStatus(order.id, 'delivering')}
                              disabled={updatingOrderId === order.id}
                              className="bg-purple-50 border-purple-200 text-purple-700 hover:bg-purple-100"
                            >
                              {updatingOrderId === order.id ? '...' : '–í –¥–æ—Å—Ç–∞–≤–∫–µ'}
                            </Button>
                          )}
                          
                          {order.status === 'delivering' && (
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleUpdateOrderStatus(order.id, 'delivered')}
                              disabled={updatingOrderId === order.id}
                              className="bg-green-50 border-green-200 text-green-700 hover:bg-green-100"
                            >
                              {updatingOrderId === order.id ? '...' : '–î–æ—Å—Ç–∞–≤–ª–µ–Ω'}
                            </Button>
                          )}
                          
                          {(order.status === 'pending' || order.status === 'preparing' || order.status === 'ready') && (
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleUpdateOrderStatus(order.id, 'cancelled')}
                              disabled={updatingOrderId === order.id}
                              className="bg-red-50 border-red-200 text-red-700 hover:bg-red-100"
                            >
                              {updatingOrderId === order.id ? '...' : '–û—Ç–º–µ–Ω–∏—Ç—å'}
                            </Button>
                          )}
                          
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => openOrderDetail(order)}
                          >
                            –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                          </Button>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => printReceipt(order)}
                          >
                            –ü–µ—á–∞—Ç—å
                          </Button>
                          {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ */}
                          {order.paymentProof && (
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => {
                                if (order.paymentProof?.startsWith('data:image')) {
                                  // –ï—Å–ª–∏ —ç—Ç–æ base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
                                  const newWindow = window.open();
                                  if (newWindow) {
                                    newWindow.document.write(`
                                      <html>
                                        <head><title>–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ - –ó–∞–∫–∞–∑ #${order.orderNumber}</title></head>
                                        <body style="margin: 0; padding: 20px; background: #f5f5f5;">
                                          <div style="max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                                            <h2 style="color: #333; margin-bottom: 20px;">–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ - –ó–∞–∫–∞–∑ #${order.orderNumber}</h2>
                                            <img src="${order.paymentProof}" style="max-width: 100%; height: auto; border-radius: 4px;" alt="–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ" />
                                            <div style="margin-top: 20px; padding-top: 20px; border-top: 1px solid #eee; color: #666;">
                                              <p><strong>–ö–ª–∏–µ–Ω—Ç:</strong> ${order.customerName}</p>
                                              <p><strong>–î–∞—Ç–∞:</strong> ${order.paymentProofDate ? new Date(order.paymentProofDate).toLocaleDateString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
                                            </div>
                                          </div>
                                        </body>
                                      </html>
                                    `);
                                    newWindow.document.close();
                                  }
                                } else {
                                  // –ï—Å–ª–∏ —ç—Ç–æ URL, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                                  window.open(order.paymentProof, '_blank');
                                }
                              }}
                              className="bg-green-50 border-green-200 text-green-700 hover:bg-green-100"
                            >
                              <Receipt className="w-4 h-4 mr-1" />
                              –ß–µ–∫
                            </Button>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        )}

      </div>
      
      <OrderDetailModal
        order={selectedOrder ? {
          id: selectedOrder.id,
          order_number: selectedOrder.orderNumber,
          customer_name: selectedOrder.customerName,
          customer_phone: selectedOrder.customerPhone,
          delivery_address: selectedOrder.deliveryAddress,
          total_amount: selectedOrder.totalAmount,
          status: selectedOrder.status,
          payment_method: selectedOrder.paymentMethod,
          payment_status: selectedOrder.paymentStatus,
          created_at: selectedOrder.createdAt,
          items: selectedOrder.items?.map(item => ({
            id: item.id,
            product_name: item.productName,
            quantity: item.quantity,
            price: item.price,
            total: item.totalPrice,
            product_id: item.id
          })),
          payment_proof: selectedOrder.paymentProof,
          payment_proof_date: selectedOrder.paymentProofDate,
          notes: selectedOrder.notes
        } : null}
        isOpen={isDetailModalOpen}
        onClose={closeOrderDetail}
        onOrderUpdate={handleOrderUpdate}
      />
    </AdminLayout>
  );
};

