console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–Ω API —Å OTP');
console.log('=' .repeat(50));

const crypto = require('crypto');

// –ü—Ä–æ–¥–∞–∫—à–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  version: 1005,
  sid: '5240752550',
  password: 'R^@OVPC|5@{64}G',
  serverUrl: 'https://api.dengi.o.kg/api/json/json.php',
  lang: 'ru'
};

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
function createHash(jsonString, password) {
  return crypto.createHmac('md5', password).update(jsonString).digest('hex');
}

// –°–æ–∑–¥–∞–Ω–∏–µ JSON –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
function createCompactJson(obj) {
  return JSON.stringify(obj, null, '').replace(/\s+/g, '');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
function createRequest(cmd, data) {
  const mktime = Date.now().toString();
  
  const requestData = {
    cmd,
    version: config.version,
    sid: config.sid,
    mktime,
    lang: config.lang,
    data
  };
  
  const jsonString = createCompactJson(requestData);
  const hash = createHash(jsonString, config.password);
  requestData.hash = hash;
  
  return requestData;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
async function sendRequest(requestData) {
  try {
    const response = await fetch(config.serverUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json; charset=utf-8'
      },
      body: JSON.stringify(requestData)
    });
    
    const responseData = await response.json();
    return responseData;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
    throw error;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ OTP
async function getOTP() {
  console.log('üîë –ü–æ–ª—É—á–∞–µ–º OTP...');
  
  try {
    const requestData = createRequest('getOTP', { return_url: null });
    const response = await sendRequest(requestData);
    
    if (response.data && response.data.otp) {
      console.log('‚úÖ OTP –ø–æ–ª—É—á–µ–Ω:', response.data.otp);
      return response.data.otp;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OTP');
      return null;
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ getOTP:', error.message);
    return null;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ —Å OTP
async function createInvoiceWithOTP(otp) {
  console.log('\nüí∞ –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —Å OTP...');
  
  try {
    const orderId = `prod_otp_${Date.now()}`;
    
    const requestData = createRequest('createInvoice', {
      order_id: orderId,
      desc: '–¢–µ—Å—Ç —Å OTP',
      amount: 100, // 1 —Å–æ–º
      currency: 'KGS',
      test: 1, // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
      otp: otp // –î–æ–±–∞–≤–ª—è–µ–º OTP
    });
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å OTP...');
    const response = await sendRequest(requestData);
    
    if (response.data && response.data.invoice_id) {
      console.log('üéâ –£–°–ü–ï–•! QR-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω —Å OTP!');
      console.log('Invoice ID:', response.data.invoice_id);
      console.log('QR URL:', response.data.qr_url);
      console.log('EMV QR:', response.data.emv_qr);
      return response.data;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ —Å OTP');
      if (response.data && response.data.error) {
        console.log('–ö–æ–¥ –æ—à–∏–±–∫–∏:', response.data.error);
        console.log('–û–ø–∏—Å–∞–Ω–∏–µ:', response.data.desc);
      }
      return null;
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ createInvoice:', error.message);
    return null;
  }
}

// –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å OTP
async function testDifferentOTPVariations(otp) {
  const variations = [
    {
      name: '–° OTP –∏ test=1',
      data: {
        order_id: `test_${Date.now()}`,
        desc: 'Test with OTP',
        amount: 100,
        currency: 'KGS',
        test: 1,
        otp: otp
      }
    },
    {
      name: '–° OTP –∏ test=0 (–ø—Ä–æ–¥–∞–∫—à–Ω)',
      data: {
        order_id: `prod_${Date.now()}`,
        desc: 'Production with OTP',
        amount: 100,
        currency: 'KGS',
        test: 0,
        otp: otp
      }
    },
    {
      name: '–° OTP –∏ long_term=0',
      data: {
        order_id: `test_${Date.now()}`,
        desc: 'Test with OTP and long_term',
        amount: 100,
        currency: 'KGS',
        test: 1,
        long_term: 0,
        otp: otp
      }
    }
  ];

  for (const variation of variations) {
    console.log(`\nüß™ ${variation.name}`);
    console.log('-'.repeat(40));
    
    try {
      const requestData = createRequest('createInvoice', variation.data);
      const response = await sendRequest(requestData);
      
      if (response.data && response.data.invoice_id) {
        console.log('‚úÖ –£–°–ü–ï–•!');
        console.log('Invoice ID:', response.data.invoice_id);
        console.log('QR URL:', response.data.qr_url);
        return response.data;
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞:', response.data?.desc || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞:', error.message);
    }
    
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  return null;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º OTP
    const otp = await getOTP();
    
    if (!otp) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å OTP, –∑–∞–≤–µ—Ä—à–∞–µ–º');
      return;
    }
    
    // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å —Å OTP
    const result = await createInvoiceWithOTP(otp);
    
    if (!result) {
      // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
      console.log('\nüîÑ –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å OTP...');
      await testDifferentOTPVariations(otp);
    } else {
      console.log('\nüéâ QR-–ö–û–î –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù!');
      console.log('=' .repeat(50));
      console.log('üîó QR-—Å—Å—ã–ª–∫–∏:');
      console.log('QR URL:', result.qr_url);
      console.log('EMV QR:', result.emv_qr);
      console.log('Link App:', result.link_app);
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫
main();
