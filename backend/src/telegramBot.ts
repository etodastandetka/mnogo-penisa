import TelegramBot from 'node-telegram-bot-api';
import { config } from 'dotenv';
import sqlite3 from 'sqlite3';
import path from 'path';

config();

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_ADMIN_GROUP_ID = process.env.TELEGRAM_ADMIN_GROUP_ID;
const TELEGRAM_WEBHOOK_URL = process.env.TELEGRAM_WEBHOOK_URL;

let bot: TelegramBot | null = null;

if (TELEGRAM_BOT_TOKEN) {
  bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: false });
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω URL
  if (TELEGRAM_WEBHOOK_URL) {
    bot.setWebHook(TELEGRAM_WEBHOOK_URL).then(() => {
      console.log('‚úÖ Telegram webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', TELEGRAM_WEBHOOK_URL);
    }).catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
    });
  }
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, '../database.sqlite');
const db = new sqlite3.Database(dbPath);

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è Telegram –±–æ—Ç–∞
db.run(`
  CREATE TABLE IF NOT EXISTS telegram_users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    telegram_id INTEGER UNIQUE NOT NULL,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    phone TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  )
`);

db.run(`
  CREATE TABLE IF NOT EXISTS telegram_orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    telegram_id INTEGER NOT NULL,
    order_id INTEGER NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (telegram_id) REFERENCES telegram_users (telegram_id),
    FOREIGN KEY (order_id) REFERENCES orders (id)
  )
`);

interface Order {
  id: number;
  orderNumber: string;
  customerName: string;
  customerPhone: string;
  deliveryAddress: string;
  totalAmount: number;
  status: string;
  items: Array<{
    productName: string;
    quantity: number;
    price: number;
  }>;
  createdAt: string;
}

export async function sendNewOrderNotification(order: Order): Promise<void> {
  if (!bot || !TELEGRAM_ADMIN_GROUP_ID) {
    return;
  }

  try {
    const message = formatOrderMessage(order);
    await bot.sendMessage(TELEGRAM_ADMIN_GROUP_ID, message, {
      parse_mode: 'HTML',
      disable_web_page_preview: true
    });
    
    // –°–≤—è–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Telegram –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    await linkOrderWithTelegramUser(order.orderNumber, order.customerPhone);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ:', error);
  }
}

export async function sendStatusUpdateNotification(order: any, oldStatus: string): Promise<void> {
  if (!bot || !TELEGRAM_ADMIN_GROUP_ID) {
    return;
  }

  try {
    const message = formatStatusUpdateMessage(order, oldStatus);
    await bot.sendMessage(TELEGRAM_ADMIN_GROUP_ID, message, {
      parse_mode: 'HTML',
      disable_web_page_preview: true
    });
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
    await notifyClientAboutStatusChange(order.orderNumber, order.status);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
  }
}

function formatOrderMessage(order: Order): string {
  const statusEmoji = getStatusEmoji(order.status);
  const statusText = getStatusText(order.status);
  
  return `
üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>

üìã <b>–ó–∞–∫–∞–∑ #${order.orderNumber}</b>
üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${order.customerName}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${order.customerPhone}
üìç <b>–ê–¥—Ä–µ—Å:</b> ${order.deliveryAddress || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üí∞ <b>–°—É–º–º–∞:</b> ${order.totalAmount} —Å–æ–º
${statusEmoji} <b>–°—Ç–∞—Ç—É—Å:</b> ${statusText}

üõí <b>–¢–æ–≤–∞—Ä—ã:</b>
${order.items.map(item => `‚Ä¢ ${item.productName} x${item.quantity} - ${item.price} —Å–æ–º`).join('\n')}

‚è∞ <b>–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:</b> ${formatDate(order.createdAt)}
  `.trim();
}

function formatStatusUpdateMessage(order: any, oldStatus: string): string {
  const oldStatusEmoji = getStatusEmoji(oldStatus);
  const newStatusEmoji = getStatusEmoji(order.status);
  const oldStatusText = getStatusText(oldStatus);
  const newStatusText = getStatusText(order.status);
  
  return `
üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞</b>

üìã <b>–ó–∞–∫–∞–∑ #${order.orderNumber}</b>
üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${order.customerName}
${oldStatusEmoji} <b>–°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å:</b> ${oldStatusText}
${newStatusEmoji} <b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b> ${newStatusText}

‚è∞ <b>–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b> ${formatDate(new Date().toISOString())}
  `.trim();
}

function getStatusEmoji(status: string): string {
  switch (status) {
    case 'pending': return '‚è≥';
    case 'paid': return 'üí≥';
    case 'preparing': return 'üë®‚Äçüç≥';
    case 'ready': return '‚úÖ';
    case 'delivering': return 'üöö';
    case 'delivered': return 'üéâ';
    case 'cancelled': return '‚ùå';
    default: return 'üìã';
  }
}

function getStatusText(status: string): string {
  switch (status) {
    case 'pending': return '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã';
    case 'paid': return '–û–ø–ª–∞—á–µ–Ω';
    case 'preparing': return '–ì–æ—Ç–æ–≤–∏—Ç—Å—è';
    case 'ready': return '–ì–æ—Ç–æ–≤';
    case 'delivering': return '–í –¥–æ—Å—Ç–∞–≤–∫–µ';
    case 'delivered': return '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
    case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω';
    default: return status;
  }
}

function formatDate(dateString: string): string {
  const date = new Date(dateString);
  return date.toLocaleString('ru-RU', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  });
}

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞

export function getBotInfo(): { isConfigured: boolean; chatId?: string } {
  return {
    isConfigured: !!(TELEGRAM_BOT_TOKEN && TELEGRAM_ADMIN_GROUP_ID),
    chatId: TELEGRAM_ADMIN_GROUP_ID
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
async function notifyClientAboutStatusChange(orderId: string, newStatus: string): Promise<void> {
  try {
    db.get(`
      SELECT to.telegram_id, o.total_amount, o.delivery_address
      FROM telegram_orders to
      JOIN orders o ON to.order_id = o.id
      WHERE to.order_id = ?
    `, [orderId], (err, result) => {
      if (err || !result) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–∫–∞–∑–∞:', orderId);
        return;
      }
      
      const status = getStatusEmoji(newStatus);
      const message = `
${status} –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑–º–µ–Ω–µ–Ω!

üìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${getStatusText(newStatus)}
üí∞ –°—É–º–º–∞: ${result.total_amount} ‚ÇΩ
üìç –ê–¥—Ä–µ—Å: ${result.delivery_address || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üîÑ –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /order ${orderId}
      `;
      
      bot?.sendMessage(result.telegram_id, message);
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Telegram
async function linkOrderWithTelegramUser(orderId: string, phone: string): Promise<void> {
  try {
    db.get('SELECT telegram_id FROM telegram_users WHERE phone = ?', [phone], (err, user) => {
      if (err || !user) {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º', phone, '–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Telegram');
        return;
      }
      
      db.run('INSERT OR IGNORE INTO telegram_orders (telegram_id, order_id) VALUES (?, ?)', 
        [user.telegram_id, orderId], (err) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', err);
        } else {
          console.log('–ó–∞–∫–∞–∑', orderId, '—Å–≤—è–∑–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Telegram', user.telegram_id);
        }
      });
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
export async function registerTelegramUser(telegramId: number, username: string, firstName: string, lastName: string, phone?: string): Promise<void> {
  try {
    db.run(
      'INSERT OR IGNORE INTO telegram_users (telegram_id, username, first_name, last_name, phone) VALUES (?, ?, ?, ?, ?)',
      [telegramId, username, firstName, lastName, phone]
    );
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', telegramId);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getUserOrder(telegramId: number, orderId: string): Promise<any> {
  return new Promise((resolve, reject) => {
    db.get(`
      SELECT o.*, GROUP_CONCAT(oi.quantity || 'x ' || p.name) as items
      FROM orders o
      LEFT JOIN order_items oi ON o.id = oi.order_id
      LEFT JOIN products p ON oi.product_id = p.id
      JOIN telegram_orders to ON o.id = to.order_id
      WHERE o.id = ? AND to.telegram_id = ?
      GROUP BY o.id
    `, [orderId, telegramId], (err, order) => {
      if (err) {
        reject(err);
      } else {
        resolve(order);
      }
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getUserOrders(telegramId: number): Promise<any[]> {
  return new Promise((resolve, reject) => {
    db.all(`
      SELECT o.id, o.status, o.total_amount, o.created_at, o.delivery_address
      FROM orders o
      JOIN telegram_orders to ON o.id = to.order_id
      WHERE to.telegram_id = ?
      ORDER BY o.created_at DESC
      LIMIT 10
    `, [telegramId], (err, orders) => {
      if (err) {
        reject(err);
      } else {
        resolve(orders || []);
      }
    });
  });
}

